'use client';

import { useState, useEffect, useMemo } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import { RemoteWorkDetail } from '@/types/athome';
import { colors, mockRemoteWorkReviews, mockRemoteWorkQuestions } from '@/data/athomeData';
import { ProjectService } from '@/services/database';



export default function RemoteWorkDetailPage() {
  const params = useParams();
  const router = useRouter();
  const remoteWorkId = params.id as string;
  
  const [remoteWork, setRemoteWork] = useState<RemoteWorkDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'environment' | 'culture' | 'tools' | 'company' | 'reviews'>('overview');
  const [activeSubTab, setActiveSubTab] = useState<'questions' | 'reviews'>('questions');
  
  // Î™®Îã¨ ÏÉÅÌÉúÎì§
  const [showApplicationModal, setShowApplicationModal] = useState(false);
  const [showCompanyModal, setShowCompanyModal] = useState(false);
  const [showVirtualOfficeModal, setShowVirtualOfficeModal] = useState(false);
  const [showEnvironmentSetupModal, setShowEnvironmentSetupModal] = useState(false);
  const [showProductivityModal, setShowProductivityModal] = useState(false);
  const [showChatModal, setShowChatModal] = useState(false);
  const [showVideoCallModal, setShowVideoCallModal] = useState(false);
  const [showOnboardingModal, setShowOnboardingModal] = useState(false);
  const [showToolsModal, setShowToolsModal] = useState(false);
  const [showPolicyModal, setShowPolicyModal] = useState(false);
  
  // Ïù∏ÌÑ∞ÎûôÌã∞Î∏å ÏÉÅÌÉúÎì§
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [skillMatchScore, setSkillMatchScore] = useState(0);
  const [remoteWorkScore, setRemoteWorkScore] = useState(0);
  const [currentOnlineWorkers, setCurrentOnlineWorkers] = useState(24);
  const [currentActiveTeams, setCurrentActiveTeams] = useState(8);
  
  // Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ
  const [realtimeStats, setRealtimeStats] = useState(mockRealtimeStats);

  // Í∞ÄÏÉÅ Ïò§ÌîºÏä§ Ìà¨Ïñ¥ ÏÉÅÌÉú
  const [virtualTourStep, setVirtualTourStep] = useState(0);
  const [isVirtualTourActive, setIsVirtualTourActive] = useState(false);

  // ÌôòÍ≤Ω ÏÑ§Ï†ï ÎèÑÏö∞ÎØ∏ ÏÉÅÌÉú
  const [environmentSetupStep, setEnvironmentSetupStep] = useState(0);
  const [selectedTimezone, setSelectedTimezone] = useState('Asia/Seoul');
  const [workingHoursPreference, setWorkingHoursPreference] = useState('flexible');

  // Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const interval = setInterval(() => {
      setRealtimeStats(prev => ({
        ...prev,
        views: prev.views + Math.floor(Math.random() * 5) + 1,
        applicants: prev.applicants + (Math.random() > 0.8 ? 1 : 0),
        onlineInterviews: Math.max(5, prev.onlineInterviews + Math.floor(Math.random() * 3) - 1)
      }));
      setCurrentOnlineWorkers(prev => Math.max(15, prev + Math.floor(Math.random() * 6) - 2));
      setCurrentActiveTeams(prev => Math.max(3, prev + Math.floor(Math.random() * 4) - 1));
    }, 8000); // 8Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏

    return () => clearInterval(interval);
  }, []);

  // Ïä§ÌÇ¨ Îß§Ïπ≠ Ï†êÏàò Í≥ÑÏÇ∞
  useEffect(() => {
    if (remoteWork) {
      // ÏÇ¨Ïö©ÏûêÏùò Î≥¥Ïú† Ïä§ÌÇ¨ (Ïã§Ï†úÎ°úÎäî Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
      const userSkills = ['React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Git']; 
      
      const matchingSkills = remoteWork.skills.filter(skill => 
        userSkills.some(userSkill => 
          userSkill.toLowerCase().includes(skill.toLowerCase()) || 
          skill.toLowerCase().includes(userSkill.toLowerCase())
        )
      );
      
      const score = Math.round((matchingSkills.length / remoteWork.skills.length) * 100);
      setSkillMatchScore(score);
      
      // ÏõêÍ≤©Í∑ºÎ¨¥ Ï†ÅÌï©ÎèÑ Ï†êÏàò Í≥ÑÏÇ∞
      let remoteScore = 0;
      if (remoteWork.isFullyRemote) remoteScore += 30;
      if (remoteWork.remoteWorkEnvironment?.officeSetupSupport) remoteScore += 20;
      if (remoteWork.workingConditions?.timeZoneFlexibility === 'High') remoteScore += 25;
      if (remoteWork.virtualOffice?.digitalWhiteboards) remoteScore += 15;
      if (remoteWork.teamCulture?.communicationStyle === 'Asynchronous-first') remoteScore += 10;
      
      setRemoteWorkScore(Math.min(100, remoteScore));
    }
  }, [remoteWork]);

  // Ïû¨ÌÉùÍ∑ºÎ¨¥ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadRemoteWorkDetail = async () => {
      setLoading(true);
      
      // ÏûÑÏãú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (Ïã§Ï†úÎ°úÎäî APIÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
      setTimeout(() => {
        import { RemoteWorkDetail } from '@/types/athome';
import { 
  colors,
  mockRemoteWork,
  mockSimilarRemoteWorks,
  mockRemoteWorkReviews,
  mockRemoteWorkQuestions,
  mockRealtimeStats
} from '@/data/athomeData';

export default function RemoteWorkDetailPage() {
  const params = useParams();
  const router = useRouter();
  const remoteWorkId = params.id as string;
  
  const [remoteWork, setRemoteWork] = useState<RemoteWorkDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'overview' | 'environment' | 'culture' | 'tools' | 'company' | 'reviews'>('overview');
  const [activeSubTab, setActiveSubTab] = useState<'questions' | 'reviews'>('questions');
  
  // Î™®Îã¨ ÏÉÅÌÉúÎì§
  const [showApplicationModal, setShowApplicationModal] = useState(false);
  const [showCompanyModal, setShowCompanyModal] = useState(false);
  const [showVirtualOfficeModal, setShowVirtualOfficeModal] = useState(false);
  const [showEnvironmentSetupModal, setShowEnvironmentSetupModal] = useState(false);
  const [showProductivityModal, setShowProductivityModal] = useState(false);
  const [showChatModal, setShowChatModal] = useState(false);
  const [showVideoCallModal, setShowVideoCallModal] = useState(false);
  const [showOnboardingModal, setShowOnboardingModal] = useState(false);
  const [showToolsModal, setShowToolsModal] = useState(false);
  const [showPolicyModal, setShowPolicyModal] = useState(false);
  
  // Ïù∏ÌÑ∞ÎûôÌã∞Î∏å ÏÉÅÌÉúÎì§
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [skillMatchScore, setSkillMatchScore] = useState(0);
  const [remoteWorkScore, setRemoteWorkScore] = useState(0);
  const [currentOnlineWorkers, setCurrentOnlineWorkers] = useState(24);
  const [currentActiveTeams, setCurrentActiveTeams] = useState(8);
  
  // Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ
  const [realtimeStats, setRealtimeStats] = useState(mockRealtimeStats);

  // Í∞ÄÏÉÅ Ïò§ÌîºÏä§ Ìà¨Ïñ¥ ÏÉÅÌÉú
  const [virtualTourStep, setVirtualTourStep] = useState(0);
  const [isVirtualTourActive, setIsVirtualTourActive] = useState(false);

  // ÌôòÍ≤Ω ÏÑ§Ï†ï ÎèÑÏö∞ÎØ∏ ÏÉÅÌÉú
  const [environmentSetupStep, setEnvironmentSetupStep] = useState(0);
  const [selectedTimezone, setSelectedTimezone] = useState('Asia/Seoul');
  const [workingHoursPreference, setWorkingHoursPreference] = useState('flexible');

  // Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const interval = setInterval(() => {
      setRealtimeStats(prev => ({
        ...prev,
        views: prev.views + Math.floor(Math.random() * 5) + 1,
        applicants: prev.applicants + (Math.random() > 0.8 ? 1 : 0),
        onlineInterviews: Math.max(5, prev.onlineInterviews + Math.floor(Math.random() * 3) - 1)
      }));
      setCurrentOnlineWorkers(prev => Math.max(15, prev + Math.floor(Math.random() * 6) - 2));
      setCurrentActiveTeams(prev => Math.max(3, prev + Math.floor(Math.random() * 4) - 1));
    }, 8000); // 8Ï¥àÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏

    return () => clearInterval(interval);
  }, []);

  // Ïä§ÌÇ¨ Îß§Ïπ≠ Ï†êÏàò Í≥ÑÏÇ∞
  useEffect(() => {
    if (remoteWork) {
      // ÏÇ¨Ïö©ÏûêÏùò Î≥¥Ïú† Ïä§ÌÇ¨ (Ïã§Ï†úÎ°úÎäî Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò ÌîÑÎ°úÌïÑÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
      const userSkills = ['React', 'TypeScript', 'Node.js', 'Python', 'AWS', 'Git']; 
      
      const matchingSkills = remoteWork.skills.filter(skill => 
        userSkills.some(userSkill => 
          userSkill.toLowerCase().includes(skill.toLowerCase()) || 
          skill.toLowerCase().includes(userSkill.toLowerCase())
        )
      );
      
      const score = Math.round((matchingSkills.length / remoteWork.skills.length) * 100);
      setSkillMatchScore(score);
      
      // ÏõêÍ≤©Í∑ºÎ¨¥ Ï†ÅÌï©ÎèÑ Ï†êÏàò Í≥ÑÏÇ∞
      let remoteScore = 0;
      if (remoteWork.isFullyRemote) remoteScore += 30;
      if (remoteWork.remoteWorkEnvironment?.officeSetupSupport) remoteScore += 20;
      if (remoteWork.workingConditions?.timeZoneFlexibility === 'High') remoteScore += 25;
      if (remoteWork.virtualOffice?.digitalWhiteboards) remoteScore += 15;
      if (remoteWork.teamCulture?.communicationStyle === 'Asynchronous-first') remoteScore += 10;
      
      setRemoteWorkScore(Math.min(100, remoteScore));
    }
  }, [remoteWork]);

  // Ïû¨ÌÉùÍ∑ºÎ¨¥ ÏÉÅÏÑ∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadRemoteWorkDetail = async () => {
      setLoading(true);
      
      // ÏûÑÏãú Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (Ïã§Ï†úÎ°úÎäî APIÏóêÏÑú Í∞ÄÏ†∏Ïò¥)
      setTimeout(() => {
        setRemoteWork(mockRemoteWork(remoteWorkId));
        setLoading(false);
      }, 900);
    };

    if (remoteWorkId) {
      loadRemoteWorkDetail();
    }
  }, [remoteWorkId]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">ÏõêÍ≤©Í∑ºÎ¨¥ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    );
  }

  if (!remoteWork) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">üè†</div>
          <h2 className="text-2xl font-bold text-gray-800 dark:text-white mb-2">ÏõêÍ≤©Í∑ºÎ¨¥ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-4">Ï°¥Ïû¨ÌïòÏßÄ ÏïäÍ±∞ÎÇò ÏÇ≠Ï†úÎêú ÏõêÍ≤©Í∑ºÎ¨¥ Í≥µÍ≥†ÏûÖÎãàÎã§.</p>
          <Link 
            href="/athome"
            className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg"
          >
            Î™©Î°ùÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* ÏÉÅÎã® Î∏åÎ†àÎìúÌÅ¨Îüº */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <nav className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
            <Link href="/" className="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">Ìôà</Link>
            <span>‚Ä∫</span>
            <Link href="/athome" className="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">Ïû¨ÌÉù ÌîÑÎ°úÏ†ùÌä∏</Link>
            <span>‚Ä∫</span>
            <span className="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">ÏÉÅÏÑ∏Î≥¥Í∏∞</span>
            <span>‚Ä∫</span>
            <span className="text-gray-900 dark:text-white font-medium">{remoteWork.title}</span>
          </nav>
        </div>
      </div>

      {/* Î©îÏù∏ Ìó§Îçî ÏòÅÏó≠ */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          
          {/* ÏÉÅÎã® ÌÉúÍ∑∏ Î∞è Ïã§ÏãúÍ∞Ñ Ï†ïÎ≥¥ */}
          <div className="flex flex-wrap items-center justify-between mb-6">
            <div className="flex flex-wrap items-center gap-3">
              {remoteWork.isFullyRemote && (
                <span className="px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white text-sm font-semibold rounded-full shadow-lg">
                  üíª 100% ÏõêÍ≤©Í∑ºÎ¨¥
                </span>
              )}
              <span className="px-4 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white text-sm font-semibold rounded-full shadow-lg">
                üåç Í∏ÄÎ°úÎ≤å ÌåÄ
              </span>
              <span className="px-4 py-2 bg-gradient-to-r from-orange-500 to-red-600 text-white text-sm font-semibold rounded-full shadow-lg">
                ‚ö° {remoteWork.level}
              </span>
              <span className="px-4 py-2 bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-sm font-semibold rounded-full shadow-lg">
                üéØ {remoteWork.category}
              </span>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Ïã§ÏãúÍ∞Ñ Ïò®ÎùºÏù∏ ÌåÄÏõê */}
              <div className="flex items-center space-x-2 bg-green-50 dark:bg-green-900/30 px-4 py-2 rounded-xl">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-green-700 dark:text-green-300 text-sm font-medium">
                  {currentOnlineWorkers}Î™Ö Ïò®ÎùºÏù∏
                </span>
              </div>
              {/* ÌôúÏÑ± ÌåÄ Ïàò */}
              <div className="flex items-center space-x-2 bg-blue-50 dark:bg-blue-900/30 px-4 py-2 rounded-xl">
                <div className="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                <span className="text-blue-700 dark:text-blue-300 text-sm font-medium">
                  {currentActiveTeams}Í∞ú ÌåÄ ÌôúÏÑ±
                </span>
              </div>
            </div>
          </div>

          {/* Ï†úÎ™© Î∞è ÌöåÏÇ¨ Ï†ïÎ≥¥ */}
          <div className="mb-6">
            <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mb-4 leading-tight">
              {remoteWork.title}
            </h1>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center text-white font-bold text-lg">
                  {remoteWork.companyInfo.name.charAt(1)}
                </div>
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 dark:text-white">{remoteWork.company}</h2>
                  <p className="text-gray-600 dark:text-gray-400">{remoteWork.companyInfo.industry} ‚Ä¢ {remoteWork.companyInfo.size}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Ïä§ÌÇ¨ Îß§Ïπ≠ Ï†êÏàò */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            {/* Ïä§ÌÇ¨ Îß§Ïπ≠ Ï†êÏàò */}
            <div className="bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/30 dark:to-indigo-900/30 p-6 rounded-xl border border-blue-200/50 dark:border-blue-700/30">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">üéØ Ïä§ÌÇ¨ Îß§Ïπ≠ÎèÑ</h3>
                <span className={`text-2xl font-bold ${
                  skillMatchScore >= 80 ? 'text-green-600 dark:text-green-400' :
                  skillMatchScore >= 60 ? 'text-yellow-600 dark:text-yellow-400' :
                  'text-red-600 dark:text-red-400'
                }`}>
                  {skillMatchScore}%
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 mb-2">
                <div 
                  className={`h-3 rounded-full transition-all duration-1000 ease-out ${
                    skillMatchScore >= 80 ? 'bg-gradient-to-r from-green-500 to-emerald-500' :
                    skillMatchScore >= 60 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                    'bg-gradient-to-r from-red-500 to-pink-500'
                  }`}
                  style={{ width: `${skillMatchScore}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {skillMatchScore >= 80 ? 'Îß§Ïö∞ Ï†ÅÌï©Ìïú Ìè¨ÏßÄÏÖòÏûÖÎãàÎã§!' :
                 skillMatchScore >= 60 ? 'Ï†ÅÌï©Ìïú Ìè¨ÏßÄÏÖòÏûÖÎãàÎã§' :
                 'ÏùºÎ∂Ä Ïä§ÌÇ¨ Í∞úÎ∞úÏù¥ ÌïÑÏöîÌï©ÎãàÎã§'}
              </p>
            </div>

            {/* ÏõêÍ≤©Í∑ºÎ¨¥ Ï†ÅÌï©ÎèÑ */}
            <div className="bg-gradient-to-br from-purple-50 to-pink-100 dark:from-purple-900/30 dark:to-pink-900/30 p-6 rounded-xl border border-purple-200/50 dark:border-purple-700/30">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">üè† ÏõêÍ≤©Í∑ºÎ¨¥ Ï†êÏàò</h3>
                <span className={`text-2xl font-bold ${
                  remoteWorkScore >= 80 ? 'text-green-600 dark:text-green-400' :
                  remoteWorkScore >= 60 ? 'text-yellow-600 dark:text-yellow-400' :
                  'text-red-600 dark:text-red-400'
                }`}>
                  {remoteWorkScore}%
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 mb-2">
                <div 
                  className={`h-3 rounded-full transition-all duration-1000 ease-out ${
                    remoteWorkScore >= 80 ? 'bg-gradient-to-r from-green-500 to-emerald-500' :
                    remoteWorkScore >= 60 ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                    'bg-gradient-to-r from-red-500 to-pink-500'
                  }`}
                  style={{ width: `${remoteWorkScore}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                {remoteWorkScore >= 80 ? 'ÏõêÍ≤©Í∑ºÎ¨¥Ïóê ÏµúÏ†ÅÌôîÎêú ÌôòÍ≤Ω!' :
                 remoteWorkScore >= 60 ? 'ÏõêÍ≤©Í∑ºÎ¨¥Ïóê Ï†ÅÌï©Ìïú ÌôòÍ≤Ω' :
                 'ÏõêÍ≤©Í∑ºÎ¨¥ ÌôòÍ≤Ω Í∞úÏÑ† ÌïÑÏöî'}
              </p>
            </div>
          </div>

          {/* Ï£ºÏöî Î©îÌä∏Î¶≠ Ïπ¥ÎìúÎì§ */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-8">
            <div className="bg-white dark:bg-gray-700 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-600">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600 dark:text-blue-400 mb-1">{remoteWork.budget}</div>
                <div className="text-xs text-gray-600 dark:text-gray-400">üí∞ ÌîÑÎ°úÏ†ùÌä∏ ÏòàÏÇ∞</div>
              </div>
            </div>
            <div className="bg-white dark:bg-gray-700 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-600">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600 dark:text-green-400 mb-1">{remoteWork.duration}</div>
                <div className="text-xs text-gray-600 dark:text-gray-400">‚è±Ô∏è ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Í∞Ñ</div>
              </div>
            </div>
            <div className="bg-white dark:bg-gray-700 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-600">
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600 dark:text-purple-400 mb-1">{remoteWork.teamSize}Î™Ö</div>
                <div className="text-xs text-gray-600 dark:text-gray-400">üë• ÌåÄ Í∑úÎ™®</div>
              </div>
            </div>
            <div className="bg-white dark:bg-gray-700 p-4 rounded-xl shadow-lg border border-gray-200 dark:border-gray-600">
              <div className="text-center">
                <div className={`text-2xl font-bold mb-1 ${
                  remoteWork.deadline.includes('D-') ? 'text-red-600 dark:text-red-400' : 'text-gray-600 dark:text-gray-400'
                }`}>
                  {remoteWork.deadline}
                </div>
                <div className="text-xs text-gray-600 dark:text-gray-400">üóìÔ∏è ÎßàÍ∞êÏùº</div>
              </div>
            </div>
          </div>

          {/* ÌïÑÏàò Ïä§ÌÇ¨ */}
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">üõ†Ô∏è ÌïÑÏàò Í∏∞Ïà† Ïä§ÌÉù</h3>
            <div className="flex flex-wrap gap-2">
              {remoteWork.skills.map((skill, index) => (
                <span
                  key={index}
                  className="px-4 py-2 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-600 text-gray-800 dark:text-gray-200 rounded-lg font-medium border border-gray-300 dark:border-gray-500 hover:shadow-md transition-all duration-200"
                >
                  {skill}
                </span>
              ))}
            </div>
          </div>
        </div>

        {/* Ïï°ÏÖò Î≤ÑÌäº ÏÑπÏÖò */}
        <div className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 dark:border-gray-700/30 p-4 sm:p-6 mb-8">
          {/* Î©îÏù∏ Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 mb-6">
            
            {/* ÏßÄÏõêÌïòÍ∏∞ Î≤ÑÌäº */}
            <button
              onClick={() => setShowApplicationModal(true)}
              className="flex items-center justify-center space-x-3 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200 min-h-[60px]"
            >
              <span className="text-xl">üìù</span>
              <span className="text-base">ÏßÄÏõêÌïòÍ∏∞</span>
            </button>

            {/* Î∂ÅÎßàÌÅ¨ Î≤ÑÌäº */}
            <button
              onClick={() => setIsBookmarked(!isBookmarked)}
              className={`flex items-center justify-center space-x-3 font-semibold py-4 px-6 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200 min-h-[60px] ${
                isBookmarked 
                  ? 'bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white'
                  : 'bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600'
              }`}
            >
              <span className="text-xl">{isBookmarked ? '‚≠ê' : '‚òÜ'}</span>
              <span className="text-base">{isBookmarked ? 'Ï∞úÎê®' : 'Ï∞úÌïòÍ∏∞'}</span>
            </button>

            {/* Ïã§ÏãúÍ∞Ñ Ï±ÑÌåÖ */}
            <button
              onClick={() => setShowChatModal(true)}
              className="flex items-center justify-center space-x-3 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200 min-h-[60px]"
            >
              <span className="text-xl">üí¨</span>
              <span className="text-base">Ïã§ÏãúÍ∞Ñ Ï±ÑÌåÖ</span>
            </button>

            {/* ÌôîÏÉÅ ÎØ∏ÌåÖ ÏòàÏïΩ */}
            <button
              onClick={() => setShowVideoCallModal(true)}
              className="flex items-center justify-center space-x-3 bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg transform hover:scale-105 transition-all duration-200 min-h-[60px]"
            >
              <span className="text-xl">üìπ</span>
              <span className="text-base">ÌôîÏÉÅ ÎØ∏ÌåÖ</span>
            </button>
          </div>

          {/* Ï∂îÍ∞Ä Ïï°ÏÖò Î≤ÑÌäºÎì§ */}
          <div className="grid grid-cols-3 sm:grid-cols-3 md:grid-cols-6 gap-2 sm:gap-3">
            
            {/* Í∞ÄÏÉÅ Ïò§ÌîºÏä§ Ìà¨Ïñ¥ */}
            <button
              onClick={() => setShowVirtualOfficeModal(true)}
              className="flex flex-col items-center justify-center space-y-1 bg-gradient-to-br from-cyan-50 to-blue-100 dark:from-cyan-900/30 dark:to-blue-900/30 hover:from-cyan-100 hover:to-blue-150 dark:hover:from-cyan-900/50 dark:hover:to-blue-900/50 text-cyan-700 dark:text-cyan-300 py-3 px-1 rounded-xl border border-cyan-200 dark:border-cyan-700 transition-all duration-200 hover:shadow-md min-h-[70px]"
            >
              <span className="text-lg sm:text-xl">üè¢</span>
              <span className="text-xs font-medium text-center leading-tight">Í∞ÄÏÉÅ Ïò§ÌîºÏä§</span>
            </button>

            {/* ÌôòÍ≤Ω ÏÑ§Ï†ï ÎèÑÏö∞ÎØ∏ */}
            <button
              onClick={() => setShowEnvironmentSetupModal(true)}
              className="flex flex-col items-center justify-center space-y-1 bg-gradient-to-br from-green-50 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 hover:from-green-100 hover:to-emerald-150 dark:hover:from-green-900/50 dark:hover:to-emerald-900/50 text-green-700 dark:text-green-300 py-3 px-1 rounded-xl border border-green-200 dark:border-green-700 transition-all duration-200 hover:shadow-md min-h-[70px]"
            >
              <span className="text-lg sm:text-xl">‚öôÔ∏è</span>
              <span className="text-xs font-medium text-center leading-tight">ÌôòÍ≤Ω ÏÑ§Ï†ï</span>
            </button>

            {/* ÌòëÏóÖ ÎèÑÍµ¨ */}
            <button
              onClick={() => setShowToolsModal(true)}
              className="flex flex-col items-center justify-center space-y-1 bg-gradient-to-br from-purple-50 to-indigo-100 dark:from-purple-900/30 dark:to-indigo-900/30 hover:from-purple-100 hover:to-indigo-150 dark:hover:from-purple-900/50 dark:hover:to-indigo-900/50 text-purple-700 dark:text-purple-300 py-3 px-1 rounded-xl border border-purple-200 dark:border-purple-700 transition-all duration-200 hover:shadow-md min-h-[70px]"
            >
              <span className="text-lg sm:text-xl">üõ†Ô∏è</span>
              <span className="text-xs font-medium text-center leading-tight">ÌòëÏóÖ ÎèÑÍµ¨</span>
            </button>

            {/* ÏÉùÏÇ∞ÏÑ± Î∂ÑÏÑù */}
            <button
              onClick={() => setShowProductivityModal(true)}
              className="flex flex-col items-center justify-center space-y-1 bg-gradient-to-br from-orange-50 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 hover:from-orange-100 hover:to-red-150 dark:hover:from-orange-900/50 dark:hover:to-red-900/50 text-orange-700 dark:text-orange-300 py-3 px-1 rounded-xl border border-orange-200 dark:border-orange-700 transition-all duration-200 hover:shadow-md min-h-[70px]"
            >
              <span className="text-lg sm:text-xl">üìä</span>
              <span className="text-xs font-medium text-center leading-tight">ÏÉùÏÇ∞ÏÑ± Î∂ÑÏÑù</span>
            </button>

            {/* Ïò®Î≥¥Îî© ÏãúÎÆ¨Î†àÏù¥ÏÖò */}
            <button
              onClick={() => setShowOnboardingModal(true)}
              className="flex flex-col items-center justify-center space-y-1 bg-gradient-to-br from-yellow-50 to-amber-100 dark:from-yellow-900/30 dark:to-amber-900/30 hover:from-yellow-100 hover:to-amber-150 dark:hover:from-yellow-900/50 dark:hover:to-amber-900/50 text-yellow-700 dark:text-yellow-300 py-3 px-1 rounded-xl border border-yellow-200 dark:border-yellow-700 transition-all duration-200 hover:shadow-md min-h-[70px]"
            >
              <span className="text-lg sm:text-xl">üéØ</span>
              <span className="text-xs font-medium text-center leading-tight">Ïò®Î≥¥Îî©</span>
            </button>

            {/* Ï†ïÏ±Ö ÏÉÅÏÑ∏ */}
            <button
              onClick={() => setShowPolicyModal(true)}
              className="flex flex-col items-center justify-center space-y-1 bg-gradient-to-br from-gray-50 to-slate-100 dark:from-gray-900/30 dark:to-slate-900/30 hover:from-gray-100 hover:to-slate-150 dark:hover:from-gray-900/50 dark:hover:to-slate-900/50 text-gray-700 dark:text-gray-300 py-3 px-1 rounded-xl border border-gray-200 dark:border-gray-700 transition-all duration-200 hover:shadow-md min-h-[70px]"
            >
              <span className="text-lg sm:text-xl">üìã</span>
              <span className="text-xs font-medium text-center leading-tight">Ï†ïÏ±Ö ÏÉÅÏÑ∏</span>
            </button>
          </div>

          {/* Í≥µÏú†ÌïòÍ∏∞ Î∞è Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ Ïπ¥Îìú */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
            
            {/* Í≥µÏú†ÌïòÍ∏∞ */}
            <div className="w-full">
              <button
                onClick={async () => {
                  if (navigator.share) {
                    try {
                      await navigator.share({
                        title: remoteWork.title,
                        text: `${remoteWork.company}Ïùò ÏõêÍ≤©Í∑ºÎ¨¥ Í∏∞ÌöåÎ•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî!`,
                        url: window.location.href,
                      });
                    } catch (error) {
                      // Fallback to clipboard
                      navigator.clipboard.writeText(window.location.href);
                      alert('ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
                    }
                  } else {
                    navigator.clipboard.writeText(window.location.href);
                    alert('ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
                  }
                }}
                className="w-full flex items-center justify-center space-x-3 bg-gradient-to-r from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 text-white font-semibold py-4 px-6 rounded-xl shadow-lg transition-all duration-200 min-h-[60px]"
              >
                <span className="text-xl">üîó</span>
                <span>Í≥µÏú†ÌïòÍ∏∞</span>
              </button>
            </div>

            {/* Ïã§ÏãúÍ∞Ñ ÌÜµÍ≥Ñ Ïπ¥Îìú */}
            <div className="w-full bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 p-4 rounded-xl border border-blue-200 dark:border-blue-700">
              <div className="grid grid-cols-3 gap-2 text-center">
                <div>
                  <div className="text-lg font-bold text-blue-600 dark:text-blue-400">{realtimeStats.applicants}</div>
                  <div className="text-xs text-gray-600 dark:text-gray-400">ÏßÄÏõêÏûê</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-green-600 dark:text-green-400">{realtimeStats.views}</div>
                  <div className="text-xs text-gray-600 dark:text-gray-400">Ï°∞ÌöåÏàò</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-purple-600 dark:text-purple-400">{realtimeStats.onlineInterviews}</div>
                  <div className="text-xs text-gray-600 dark:text-gray-400">ÏßÑÌñâ Ï§ë</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8 relative">
            {[
              { id: 'overview', label: 'üìã Í∞úÏöî', icon: 'üìã' },
              { id: 'environment', label: 'üè† ÏõêÍ≤©ÌôòÍ≤Ω', icon: 'üè†' },
              { id: 'culture', label: 'üë• ÌåÄÎ¨∏Ìôî', icon: 'üë•' },
              { id: 'tools', label: 'üõ†Ô∏è ÌòëÏóÖÎèÑÍµ¨', icon: 'üõ†Ô∏è' },
              { id: 'company', label: 'üè¢ ÌöåÏÇ¨Ï†ïÎ≥¥', icon: 'üè¢' },
              { id: 'reviews', label: 'üí¨ Î¶¨Î∑∞&Q&A', icon: 'üí¨' }
            ].map((tab, index) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`relative py-4 px-4 font-medium text-sm transition-all duration-300 hover:scale-105 ${
                  activeTab === tab.id
                    ? 'text-blue-600 dark:text-blue-400 font-bold'
                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200'
                }`}
              >
                {activeTab === tab.id && (
                  <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-blue-600 dark:bg-blue-400" />
                )}
                <span className="relative z-20">{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* ÌÉ≠ Ïª®ÌÖêÏ∏† */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Í∞úÏöî ÌÉ≠ */}
        {activeTab === 'overview' && (
          <div>
              <div className="space-y-8">
                
                {/* ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏ ÏÑ§Î™Ö */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üìù ÌîÑÎ°úÏ†ùÌä∏ ÏÉÅÏÑ∏</h3>
                  <div className={`${colors.primary.bg} p-6 rounded-xl ${colors.primary.border}`}>
                    <div className="prose dark:prose-invert max-w-none">
                      <div className="whitespace-pre-line text-gray-800 dark:text-gray-200 leading-relaxed">
                        {remoteWork.detailedDescription}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Ï£ºÏöî ÏóÖÎ¨¥ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üéØ Ï£ºÏöî ÏóÖÎ¨¥</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {remoteWork.responsibilities.map((responsibility, index) => (
                      <div key={index} className={`flex items-start space-x-3 ${colors.card} p-4 rounded-xl shadow-sm`}>
                        <div className={`flex-shrink-0 w-8 h-8 ${colors.success.accent} rounded-full flex items-center justify-center text-white font-bold text-sm`}>
                          {index + 1}
                        </div>
                        <p className="text-gray-800 dark:text-gray-200">{responsibility}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÌïÑÏàò Ï°∞Í±¥ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">‚úÖ ÌïÑÏàò Ï°∞Í±¥</h3>
                  <div className="space-y-3">
                    {remoteWork.requirements.map((requirement, index) => (
                      <div key={index} className={`flex items-center space-x-3 ${colors.card} p-4 rounded-xl shadow-sm`}>
                        <div className={`flex-shrink-0 w-6 h-6 ${colors.danger.accent} rounded-full flex items-center justify-center text-white text-sm`}>
                          ‚úì
                        </div>
                        <p className="text-gray-800 dark:text-gray-200">{requirement}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Ïö∞ÎåÄ Ï°∞Í±¥ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">‚≠ê Ïö∞ÎåÄ Ï°∞Í±¥</h3>
                  <div className="space-y-3">
                    {remoteWork.preferredSkills.map((skill, index) => (
                      <div key={index} className={`flex items-center space-x-3 ${colors.card} p-4 rounded-xl shadow-sm`}>
                        <div className={`flex-shrink-0 w-6 h-6 ${colors.warning.accent} rounded-full flex items-center justify-center text-white text-sm`}>
                          ‚≠ê
                        </div>
                        <p className="text-gray-800 dark:text-gray-200">{skill}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÏßÑÌñâ Îã®Í≥Ñ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üöÄ ÏßÑÌñâ Îã®Í≥Ñ</h3>
                  <div className="space-y-4">
                    {remoteWork.workStages.map((stage, index) => (
                      <div key={stage.id} className={`${colors.card} p-6 rounded-xl shadow-sm`}>
                        <div className="flex items-start space-x-4">
                          <div className={`flex-shrink-0 w-12 h-12 ${colors.primary.accent} rounded-full flex items-center justify-center text-white font-bold text-lg`}>
                            {index + 1}
                          </div>
                          <div className="flex-1">
                            <h4 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">{stage.name}</h4>
                            <p className="text-gray-600 dark:text-gray-400 mb-3">{stage.description}</p>
                            <div className="flex flex-wrap gap-4 text-sm">
                              <span className={`${colors.primary.bg} ${colors.primary.text} px-3 py-1 rounded-full`}>
                                ‚è±Ô∏è {stage.duration}
                              </span>
                              <span className={`${colors.success.bg} ${colors.success.text} px-3 py-1 rounded-full`}>
                                ü§ù ÌòëÏóÖÎèÑ: {stage.collaborationLevel}
                              </span>
                            </div>
                            <div className="mt-3">
                              <h5 className="font-medium text-gray-900 dark:text-white mb-2">ÏÇ∞Ï∂úÎ¨º:</h5>
                              <div className="flex flex-wrap gap-2">
                                {stage.deliverables.map((deliverable, idx) => (
                                  <span key={idx} className={`${colors.neutral.bg} ${colors.neutral.text} px-3 py-1 rounded-lg text-sm`}>
                                    {deliverable}
                                  </span>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Ïú†ÏÇ¨ ÏõêÍ≤©Í∑ºÎ¨¥ Ï∂îÏ≤ú */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üîç Ïú†ÏÇ¨ ÏõêÍ≤©Í∑ºÎ¨¥ Ï∂îÏ≤ú</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
                    {[
                      {
                        id: '1',
                        title: 'React Í∞úÎ∞úÏûê (100% Î¶¨Î™®Ìä∏)',
                        company: '(Ï£º)ÎîîÏßÄÌÑ∏ÎÖ∏ÎßàÎìú',
                        budget: '6,000ÎßåÏõê',
                        duration: '4Í∞úÏõî',
                        skills: ['React', 'TypeScript', 'Node.js'],
                        applicants: 23,
                        matchScore: 94,
                        remoteScore: 98,
                        benefits: ['Ïû•ÎπÑÏßÄÏõê', 'Î¨¥Ï†úÌïúÌú¥Í∞Ä', 'Í∏ÄÎ°úÎ≤åÌåÄ']
                      },
                      {
                        id: '2',
                        title: 'AI ÏóîÏßÄÎãàÏñ¥ (ÌïòÏù¥Î∏åÎ¶¨Îìú)',
                        company: '(Ï£º)Ïä§ÎßàÌä∏ÏõåÌÅ¨',
                        budget: '7,500ÎßåÏõê',
                        duration: '5Í∞úÏõî',
                        skills: ['Python', 'TensorFlow', 'AWS'],
                        applicants: 31,
                        matchScore: 87,
                        remoteScore: 85,
                        benefits: ['ÍµêÏú°ÏßÄÏõê', 'ÌôàÏò§ÌîºÏä§', 'ÏÑ±Í≥ºÍ∏â']
                      },
                      {
                        id: '3',
                        title: 'ÌíÄÏä§ÌÉù Í∞úÎ∞úÏûê (ÏõêÍ≤©Ïö∞ÏÑ†)',
                        company: '(Ï£º)ÏõêÍ≤©ÌÖåÌÅ¨',
                        budget: '5,500ÎßåÏõê',
                        duration: '6Í∞úÏõî',
                        skills: ['React', 'Python', 'Docker'],
                        applicants: 18,
                        matchScore: 82,
                        remoteScore: 92,
                        benefits: ['Ïû•ÎπÑÏßÄÏõê', 'ÏãúÏ∞®Ï†ÅÏùë', 'ÏõåÏºÄÏù¥ÏÖò']
                      },
                      {
                        id: '4',
                        title: 'ÌÅ¥ÎùºÏö∞Îìú ÏïÑÌÇ§ÌÖçÌä∏ (Í∏ÄÎ°úÎ≤å)',
                        company: '(Ï£º)ÌÅ¥ÎùºÏö∞ÎìúÌçºÏä§Ìä∏',
                        budget: '9,000ÎßåÏõê',
                        duration: '8Í∞úÏõî',
                        skills: ['AWS', 'Docker', 'Kubernetes'],
                        applicants: 42,
                        matchScore: 78,
                        remoteScore: 96,
                        benefits: ['Í∏ÄÎ°úÎ≤åÌåÄ', 'Î¨¥Ï†úÌïúÌú¥Í∞Ä', 'Ïª®ÌçºÎü∞Ïä§']
                      }
                    ].map((similar) => (
                      <div key={similar.id} className={`${colors.card} p-6 rounded-xl shadow-sm hover:shadow-md transition-all duration-200`}>
                        <div className="flex justify-between items-start mb-3">
                          <h4 className="text-lg font-semibold text-gray-900 dark:text-white">{similar.title}</h4>
                          <div className="flex space-x-2">
                            <span className={`px-2 py-1 rounded-full text-xs font-bold ${
                              similar.matchScore >= 90 ? `${colors.success.bg} ${colors.success.text}` :
                              similar.matchScore >= 80 ? `${colors.warning.bg} ${colors.warning.text}` :
                              `${colors.danger.bg} ${colors.danger.text}`
                            }`}>
                              {similar.matchScore}%
                            </span>
                          </div>
                        </div>
                        
                        <p className="text-gray-600 dark:text-gray-400 mb-3">{similar.company}</p>
                        
                        <div className="grid grid-cols-2 gap-3 text-sm mb-4">
                          <div>
                            <span className="text-blue-600 dark:text-blue-400 font-medium">üí∞ {similar.budget}</span>
                          </div>
                          <div>
                            <span className="text-green-600 dark:text-green-400 font-medium">‚è±Ô∏è {similar.duration}</span>
                          </div>
                        </div>

                        <div className="mb-4">
                          <div className="flex flex-wrap gap-1">
                            {similar.skills.slice(0, 3).map((skill, idx) => (
                              <span key={idx} className={`${colors.neutral.bg} ${colors.neutral.text} px-2 py-1 rounded text-xs`}>
                                {skill}
                              </span>
                            ))}
                          </div>
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="text-sm text-gray-600 dark:text-gray-400">
                            üë• {similar.applicants}Î™Ö ÏßÄÏõê
                          </div>
                          <Link 
                            href={`/athome/${similar.id}`}
                            className="text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium text-sm"
                          >
                            ÏûêÏÑ∏Ìûà Î≥¥Í∏∞ ‚Üí
                          </Link>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* ÏõêÍ≤©ÌôòÍ≤Ω ÌÉ≠ */}
          {activeTab === 'environment' && (
            <div>
              <div className="space-y-8">
                
                {/* Ïû•ÎπÑ Î∞è ÏßÄÏõê ÏÇ¨Ìï≠ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üíª Ï†úÍ≥µ Ïû•ÎπÑ Î∞è ÏßÄÏõê</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {remoteWork.remoteWorkEnvironment.equipmentProvided.map((equipment, index) => (
                      <div key={index} className={`${colors.primary.bg} p-4 rounded-xl ${colors.primary.border}`}>
                        <div className="flex items-center space-x-3">
                          <div className={`w-12 h-12 ${colors.primary.accent} rounded-full flex items-center justify-center text-white text-xl`}>
                            üíª
                          </div>
                          <p className="text-gray-800 dark:text-gray-200 font-medium">{equipment}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÌôàÏò§ÌîºÏä§ ÏßÄÏõêÍ∏à */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className={`${colors.success.bg} p-6 rounded-xl ${colors.success.border}`}>
                    <div className="text-center">
                      <div className={`w-16 h-16 ${colors.success.accent} rounded-full flex items-center justify-center text-white text-2xl mx-auto mb-3`}>
                        üí∞
                      </div>
                      <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">ÏõåÌÅ¨Ïä§ÌéòÏù¥Ïä§ ÏßÄÏõêÍ∏à</h4>
                      <p className={`text-3xl font-bold ${colors.success.text} mb-1`}>
                        {remoteWork.remoteWorkEnvironment.workspaceStipend.toLocaleString()}Ïõê
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">ÏùºÌöåÏÑ± ÏßÄÍ∏â</p>
                    </div>
                  </div>

                  <div className={`${colors.primary.bg} p-6 rounded-xl ${colors.primary.border}`}>
                    <div className="text-center">
                      <div className={`w-16 h-16 ${colors.primary.accent} rounded-full flex items-center justify-center text-white text-2xl mx-auto mb-3`}>
                        üåê
                      </div>
                      <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Ïù∏ÌÑ∞ÎÑ∑ ÏßÄÏõêÍ∏à</h4>
                      <p className={`text-3xl font-bold ${colors.primary.text} mb-1`}>
                        {remoteWork.remoteWorkEnvironment.internetAllowance.toLocaleString()}Ïõê
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Ïõî ÏßÄÍ∏â</p>
                    </div>
                  </div>

                  <div className={`${colors.neutral.bg} p-6 rounded-xl ${colors.neutral.border}`}>
                    <div className="text-center">
                      <div className={`w-16 h-16 ${colors.neutral.accent} rounded-full flex items-center justify-center text-white text-2xl mx-auto mb-3`}>
                        üõ†Ô∏è
                      </div>
                      <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">Í∏∞Ïà† ÏßÄÏõê</h4>
                      <p className={`text-lg font-bold ${colors.neutral.text} mb-1`}>
                        {remoteWork.remoteWorkEnvironment.techSupport}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-400">Ï†ÑÎã¥ ÌåÄ Ïö¥ÏòÅ</p>
                    </div>
                  </div>
                </div>

                {/* Î≥¥Ïïà ÏöîÍµ¨ÏÇ¨Ìï≠ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üîí Î≥¥Ïïà ÏöîÍµ¨ÏÇ¨Ìï≠</h3>
                  <div className="space-y-3">
                    {remoteWork.remoteWorkEnvironment.securityRequirements.map((requirement, index) => (
                      <div key={index} className={`flex items-center space-x-3 ${colors.danger.bg} p-4 rounded-xl ${colors.danger.border}`}>
                        <div className={`flex-shrink-0 w-8 h-8 ${colors.danger.accent} rounded-full flex items-center justify-center text-white text-sm`}>
                          üîí
                        </div>
                        <p className="text-gray-800 dark:text-gray-200">{requirement}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÏûëÏóÖ Í≥µÍ∞Ñ Í∂åÏû•ÏÇ¨Ìï≠ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üí° ÏûëÏóÖÍ≥µÍ∞Ñ Í∂åÏû•ÏÇ¨Ìï≠</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {remoteWork.remoteWorkEnvironment.workingSpaceRecommendations.map((recommendation, index) => (
                      <div key={index} className={`flex items-start space-x-3 ${colors.warning.bg} p-4 rounded-xl ${colors.warning.border}`}>
                        <div className={`flex-shrink-0 w-8 h-8 ${colors.warning.accent} rounded-full flex items-center justify-center text-white text-sm`}>
                          üí°
                        </div>
                        <p className="text-gray-800 dark:text-gray-200">{recommendation}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÏõêÍ≤©Í∑ºÎ¨¥ ÌòúÌÉù */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üéÅ ÏõêÍ≤©Í∑ºÎ¨¥ ÌäπÎ≥Ñ ÌòúÌÉù</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {remoteWork.remoteBenefits.map((benefit, index) => (
                      <div key={index} className={`flex items-center space-x-3 ${colors.success.bg} p-4 rounded-xl ${colors.success.border}`}>
                        <div className={`flex-shrink-0 w-8 h-8 ${colors.success.accent} rounded-full flex items-center justify-center text-white text-sm`}>
                          üéÅ
                        </div>
                        <p className="text-gray-800 dark:text-gray-200 font-medium">{benefit}</p>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* ÌåÄÎ¨∏Ìôî ÌÉ≠ */}
          {activeTab === 'culture' && (
            <div>
              <div className="space-y-8">
                
                {/* Í∑ºÎ¨¥ Ï°∞Í±¥ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">‚è∞ Í∑ºÎ¨¥ Ï°∞Í±¥</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-xl border border-blue-200 dark:border-blue-700">
                      <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">Í∑ºÎ¨¥ ÏãúÍ∞Ñ</h4>
                      <div className="space-y-2 text-gray-800 dark:text-gray-200">
                        <p><strong>Í∑ºÎ¨¥ ÏãúÍ∞Ñ:</strong> {remoteWork.workingConditions.workingHours}</p>
                        <p><strong>Í∑ºÎ¨¥Ïùº:</strong> {remoteWork.workingConditions.workingDays}</p>
                        <p><strong>ÏΩîÏñ¥ ÏãúÍ∞Ñ:</strong> {remoteWork.workingConditions.coreHours}</p>
                        <p><strong>ÏãúÍ∞ÑÎåÄ Ïú†Ïó∞ÏÑ±:</strong> {remoteWork.workingConditions.timeZoneFlexibility}</p>
                      </div>
                    </div>
                    
                    <div className="bg-gradient-to-br from-green-50 to-emerald-100 dark:from-green-900/20 dark:to-emerald-900/20 p-6 rounded-xl border border-green-200 dark:border-green-700">
                      <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">Ìú¥Í∞Ä Î∞è Ï†ïÏ±Ö</h4>
                      <div className="space-y-2 text-gray-800 dark:text-gray-200">
                        <p><strong>Ìú¥Í∞Ä Ï†ïÏ±Ö:</strong> {remoteWork.workingConditions.vacationPolicy}</p>
                        <p><strong>Î≥ëÍ∞Ä Ï†ïÏ±Ö:</strong> {remoteWork.workingConditions.sickLeavePolicy}</p>
                        <p><strong>Ï¥àÍ≥ºÍ∑ºÎ¨¥:</strong> {remoteWork.workingConditions.overtimePolicy}</p>
                        <p><strong>ÏÑ±Í≥º ÌèâÍ∞Ä:</strong> {remoteWork.workingConditions.performanceTracking}</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Í∏∞ÎåÄÏÇ¨Ìï≠ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üí¨ Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖò Í∞ÄÏù¥Îìú</h3>
                  <div className="space-y-3">
                    {remoteWork.workingConditions.communicationExpectations.map((expectation, index) => (
                      <div key={index} className={`flex items-start space-x-3 ${colors.card} p-4 rounded-xl shadow-sm`}>
                        <div className={`flex-shrink-0 w-8 h-8 ${colors.primary.accent} rounded-full flex items-center justify-center text-white text-sm`}>
                          üí¨
                        </div>
                        <p className="text-gray-800 dark:text-gray-200">{expectation}</p>
                      </div>
                    ))}
                  </div>
                </div>

                {/* ÏãúÍ∞ÑÎåÄÎ≥Ñ ÌåÄ ÌôúÎèô ÌòÑÌô© */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üåç Í∏ÄÎ°úÎ≤å ÌåÄ ÌôúÎèô ÌòÑÌô©</h3>
                  <div className={`${colors.card} p-6 rounded-xl shadow-sm`}>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      {[
                        { timezone: 'Asia/Seoul (UTC+9)', team: 'Í∞úÎ∞úÌåÄ', members: 8, status: 'active' },
                        { timezone: 'America/New_York (UTC-5)', team: 'ÎîîÏûêÏù∏ÌåÄ', members: 4, status: 'active' },
                        { timezone: 'Europe/London (UTC+0)', team: 'PMÌåÄ', members: 3, status: 'sleeping' }
                      ].map((zone, index) => (
                        <div key={index} className="text-center">
                          <div className={`w-16 h-16 rounded-full mx-auto mb-3 flex items-center justify-center text-white text-xl ${
                            zone.status === 'active' ? `${colors.success.accent} animate-pulse` : `${colors.neutral.accent}`
                          }`}>
                            üåç
                          </div>
                          <h4 className="font-semibold text-gray-900 dark:text-white">{zone.team}</h4>
                          <p className="text-sm text-gray-600 dark:text-gray-400">{zone.timezone}</p>
                          <p className="text-sm text-gray-600 dark:text-gray-400">{zone.members}Î™Ö ÌåÄÏõê</p>
                          <span className={`inline-block mt-2 px-3 py-1 rounded-full text-xs font-bold ${
                            zone.status === 'active' 
                              ? `${colors.success.bg} ${colors.success.text}`
                              : `${colors.neutral.bg} ${colors.neutral.text}`
                          }`}>
                            {zone.status === 'active' ? 'üü¢ ÌôúÎèô Ï§ë' : 'üò¥ Ìú¥Ïãù Ï§ë'}
                          </span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* ÌòëÏóÖÎèÑÍµ¨ ÌÉ≠ */}
          {activeTab === 'tools' && (
            <div>
              <div className="space-y-8">
                
                {/* Ï£ºÏöî ÌòëÏóÖ ÎèÑÍµ¨ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üõ†Ô∏è Ï£ºÏöî ÌòëÏóÖ ÎèÑÍµ¨</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {remoteWork.collaborationTools.map((tool) => (
                      <div key={tool.id} className={`${colors.card} p-6 rounded-xl shadow-sm`}>
                        <div className="flex items-start space-x-4">
                          <div className={`w-16 h-16 ${colors.primary.accent} rounded-xl flex items-center justify-center text-white text-2xl`}>
                            üõ†Ô∏è
                          </div>
                          <div className="flex-1">
                            <h4 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">{tool.name}</h4>
                            <p className="text-gray-600 dark:text-gray-400 mb-3">{tool.description}</p>
                            <div className="space-y-2">
                              <div>
                                <span className="text-sm font-medium text-gray-900 dark:text-white">Ïπ¥ÌÖåÍ≥†Î¶¨: </span>
                                <span className="text-sm text-gray-600 dark:text-gray-400">{tool.category}</span>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-900 dark:text-white">ÌïôÏäµ ÎÇúÏù¥ÎèÑ: </span>
                                <span className={`text-sm ${
                                  tool.learningCurve === 'Ïâ¨ÏõÄ' ? colors.success.text :
                                  tool.learningCurve === 'Ï§ëÍ∞Ñ' ? colors.warning.text :
                                  colors.danger.text
                                }`}>
                                  {tool.learningCurve}
                                </span>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-900 dark:text-white">ÏßÄÏõê ÏàòÏ§Ä: </span>
                                <span className="text-sm text-gray-600 dark:text-gray-400">{tool.supportLevel}</span>
                              </div>
                            </div>
                            <div className="mt-4">
                              <h5 className="text-sm font-medium text-gray-900 dark:text-white mb-2">Ï£ºÏöî Í∏∞Îä•:</h5>
                              <div className="flex flex-wrap gap-2">
                                {tool.features.slice(0, 4).map((feature, idx) => (
                                  <span key={idx} className={`${colors.primary.bg} ${colors.primary.text} px-2 py-1 rounded text-xs`}>
                                    {feature}
                                  </span>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Í∞ÄÏÉÅ Ïò§ÌîºÏä§ Ï†ïÎ≥¥ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üè¢ Í∞ÄÏÉÅ Ïò§ÌîºÏä§</h3>
                  <div className={`${colors.primary.bg} p-6 rounded-xl ${colors.primary.border}`}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">ÌîåÎû´Ìèº Ï†ïÎ≥¥</h4>
                        <p className={`text-xl font-bold ${colors.primary.text} mb-2`}>{remoteWork.virtualOffice.platform}</p>
                        <p className="text-gray-600 dark:text-gray-400 mb-4">ÌôîÏÉÅ ÌíàÏßà: {remoteWork.virtualOffice.screenSharingQuality}</p>
                        <div className="space-y-2">
                          {remoteWork.virtualOffice.features.slice(0, 4).map((feature, idx) => (
                            <div key={idx} className="flex items-center space-x-2">
                              <div className={`w-2 h-2 ${colors.primary.accent} rounded-full`}></div>
                              <span className="text-gray-800 dark:text-gray-200 text-sm">{feature}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">Ïù¥Ïö© Í∞ÄÎä•Ìïú Í≥µÍ∞Ñ</h4>
                        <div className="space-y-3">
                          {remoteWork.virtualOffice.virtualRooms.map((room) => (
                            <div key={room.id} className={`${colors.card} p-4 rounded-lg`}>
                              <h5 className="font-medium text-gray-900 dark:text-white">{room.name}</h5>
                              <p className="text-sm text-gray-600 dark:text-gray-400">{room.purpose} ‚Ä¢ ÏµúÎåÄ {room.capacity}Î™Ö</p>
                              <p className="text-xs text-gray-500 dark:text-gray-500">Ïù¥Ïö©ÏãúÍ∞Ñ: {room.availability}</p>
                            </div>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* ÌöåÏÇ¨Ï†ïÎ≥¥ ÌÉ≠ */}
          {activeTab === 'company' && (
            <div>
              <div className="space-y-8">
                
                {/* ÌöåÏÇ¨ Í∞úÏöî */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üè¢ ÌöåÏÇ¨ Í∞úÏöî</h3>
                  <div className={`${colors.card} p-6 rounded-xl shadow-sm`}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <div className="space-y-4">
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÌöåÏÇ¨Î™Ö</span>
                            <p className="text-lg font-semibold text-gray-900 dark:text-white">{remoteWork.companyInfo.name}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏóÖÏ¢Ö</span>
                            <p className="text-lg text-gray-900 dark:text-white">{remoteWork.companyInfo.industry}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÌöåÏÇ¨ Í∑úÎ™®</span>
                            <p className="text-lg text-gray-900 dark:text-white">{remoteWork.companyInfo.size}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏÑ§Î¶ΩÎÖÑÎèÑ</span>
                            <p className="text-lg text-gray-900 dark:text-white">{remoteWork.companyInfo.founded}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <div className="space-y-4">
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏõêÍ≤©Í∑ºÎ¨¥ ÎπÑÏú®</span>
                            <p className={`text-lg font-semibold ${colors.success.text} mb-1`}>{remoteWork.companyInfo.remoteWorkPercentage}%</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏõêÍ≤©Í∑ºÎ¨¥ Ïó≠ÏÇ¨</span>
                            <p className="text-lg text-gray-900 dark:text-white">{remoteWork.companyInfo.remoteWorkHistory}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">Í∏ÄÎ°úÎ≤å ÌåÄ</span>
                            <p className="text-lg text-gray-900 dark:text-white">{remoteWork.companyInfo.globalTeams ? 'Ïòà' : 'ÏïÑÎãàÏò§'}</p>
                          </div>
                          <div>
                            <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏõπÏÇ¨Ïù¥Ìä∏</span>
                            <a href={remoteWork.companyInfo.website} target="_blank" rel="noopener noreferrer" 
                               className={`text-lg ${colors.primary.text} hover:underline`}>
                              {remoteWork.companyInfo.website}
                            </a>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mt-6">
                      <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÌöåÏÇ¨ ÏÜåÍ∞ú</span>
                      <p className="text-gray-800 dark:text-gray-200 mt-2 leading-relaxed">{remoteWork.companyInfo.description}</p>
                    </div>
                  </div>
                </div>

                {/* Îã§ÏñëÏÑ± Î∞è Ìè¨Ïö©ÏÑ± */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üåà Îã§ÏñëÏÑ± Î∞è Ìè¨Ïö©ÏÑ±</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {remoteWork.companyInfo.diversityAndInclusion.map((item, index) => (
                      <div key={index} className={`${colors.neutral.bg} p-4 rounded-xl ${colors.neutral.border}`}>
                        <div className="flex items-center space-x-3">
                          <div className={`w-10 h-10 ${colors.neutral.accent} rounded-full flex items-center justify-center text-white text-lg`}>
                            üåà
                          </div>
                          <p className="text-gray-800 dark:text-gray-200 font-medium">{item}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Îã¥ÎãπÏûê Ï†ïÎ≥¥ */}
                <div>
                  <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">üë§ Îã¥ÎãπÏûê Ï†ïÎ≥¥</h3>
                  <div className={`${colors.card} p-6 rounded-xl shadow-sm`}>
                    <div className="flex items-start space-x-4">
                      <div className={`w-16 h-16 ${colors.primary.accent} rounded-full flex items-center justify-center text-white text-2xl`}>
                        üë§
                      </div>
                      <div className="flex-1">
                        <h4 className="text-xl font-semibold text-gray-900 dark:text-white">{remoteWork.contactPerson.name}</h4>
                        <p className="text-gray-600 dark:text-gray-400 mb-4">{remoteWork.contactPerson.position}</p>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <div className="space-y-2">
                              <div>
                                <span className="text-sm font-medium text-gray-500 dark:text-gray-400">Ïù¥Î©îÏùº</span>
                                <p className="text-gray-900 dark:text-white">{remoteWork.contactPerson.email}</p>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏùëÎãµ ÏãúÍ∞Ñ</span>
                                <p className="text-gray-900 dark:text-white">{remoteWork.contactPerson.responseTime}</p>
                              </div>
                            </div>
                          </div>
                          <div>
                            <div className="space-y-2">
                              <div>
                                <span className="text-sm font-medium text-gray-500 dark:text-gray-400">ÏãúÍ∞ÑÎåÄ</span>
                                <p className="text-gray-900 dark:text-white">{remoteWork.contactPerson.timezone}</p>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-500 dark:text-gray-400">Í∞ÄÎä• ÏãúÍ∞Ñ</span>
                                <p className="text-gray-900 dark:text-white">{remoteWork.contactPerson.availableHours}</p>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Î¶¨Î∑∞&Q&A ÌÉ≠ */}
          {activeTab === 'reviews' && (
            <div>
              <div className="space-y-8">
                
                {/* ÏÑúÎ∏å ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
                <div className="flex space-x-4 border-b border-gray-200 dark:border-gray-700">
                  <button
                    onClick={() => setActiveSubTab('questions')}
                    className={`pb-3 px-1 text-sm font-medium transition-colors ${
                      activeSubTab === 'questions'
                        ? `${colors.primary.text} border-b-2 ${colors.primary.border.replace('border-', 'border-b-')}`
                        : `${colors.neutral.text} hover:text-gray-900 dark:hover:text-white`
                    }`}
                  >
                    üí¨ ÏßàÎ¨∏ & ÎãµÎ≥Ä (12Í∞ú)
                  </button>
                  <button
                    onClick={() => setActiveSubTab('reviews')}
                    className={`pb-3 px-1 text-sm font-medium transition-colors ${
                      activeSubTab === 'reviews'
                        ? `${colors.primary.text} border-b-2 ${colors.primary.border.replace('border-', 'border-b-')}`
                        : `${colors.neutral.text} hover:text-gray-900 dark:hover:text-white`
                    }`}
                  >
                    ‚≠ê ÏõêÍ≤©Í∑ºÎ¨¥ ÌõÑÍ∏∞ (8Í∞ú)
                  </button>
                </div>

                {/* Q&A ÏÑπÏÖò */}
                {activeSubTab === 'questions' && (
                  <div className="space-y-4">
                    {[
                      {
                        id: '1',
                        question: 'ÏõêÍ≤©Í∑ºÎ¨¥ Ï§ë ÌöåÏùòÎäî Ïñ¥ÎñªÍ≤å ÏßÑÌñâÎêòÎÇòÏöî?',
                        answer: 'Îß§Ïùº Ïò§Ï†Ñ 10Ïãú Ïä§ÌÉ†ÎìúÏóÖ ÎØ∏ÌåÖÏùÑ ÏßÑÌñâÌïòÎ©∞, Ï£ºÏöî ÌöåÏùòÎäî ÏÇ¨Ï†ÑÏóê ÏùºÏ†ïÏùÑ Í≥µÏú†Ìï©ÎãàÎã§. Î™®Îì† ÌöåÏùòÎäî ÎÖπÌôîÎêòÏñ¥ ÏãúÏ∞®Í∞Ä ÏûàÎäî ÌåÄÏõêÎì§ÎèÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
                        askedBy: 'ÍπÄÍ∞úÎ∞ú',
                        answeredBy: 'Ïù¥ÏõêÍ≤© (ÌåÄ Î¶¨Îìú)',
                        date: '2024-01-15',
                        upvotes: 12,
                        category: 'ÌöåÏùò Î¨∏Ìôî',
                        tags: ['ÌöåÏùò', 'ÏÜåÌÜµ', 'ÏùºÏ†ïÍ¥ÄÎ¶¨']
                      },
                      {
                        id: '2',
                        question: 'Ïû•ÎπÑ ÏßÄÏõêÏùÄ Ïñ¥ÎñªÍ≤å Î∞õÏùÑ Ïàò ÏûàÎÇòÏöî?',
                        answer: 'ÏûÖÏÇ¨ ÌõÑ 1Ï£ºÏùº ÎÇ¥Ïóê ÌïÑÏöîÌïú Ïû•ÎπÑ Î¶¨Ïä§Ìä∏Î•º Ï†úÏ∂úÌïòÎ©¥ Í≤ÄÌÜ† ÌõÑ Íµ¨Îß§ ÎòêÎäî ÎåÄÏó¨Ìï¥ÎìúÎ¶ΩÎãàÎã§. Îß•Î∂Å, Î™®ÎãàÌÑ∞, ÏùòÏûê, Îç∞Ïä§ÌÅ¨ Îì± ÏóÖÎ¨¥Ïóê ÌïÑÏöîÌïú Î™®Îì† Ïû•ÎπÑÎ•º ÏßÄÏõêÌï©ÎãàÎã§.',
                        askedBy: 'Î∞ïÎîîÏûêÏù¥ÎÑà',
                        answeredBy: 'HRÌåÄ',
                        date: '2024-01-10',
                        upvotes: 18,
                        category: 'Ïû•ÎπÑ ÏßÄÏõê',
                        tags: ['Ïû•ÎπÑ', 'ÏßÄÏõê', 'Î≥µÎ¶¨ÌõÑÏÉù']
                      },
                      {
                        id: '3',
                        question: 'ÏãúÏ∞®Í∞Ä ÏûàÎäî ÌåÄÏõêÎì§Í≥ºÎäî Ïñ¥ÎñªÍ≤å ÌòëÏóÖÌïòÎÇòÏöî?',
                        answer: 'ÎπÑÎèôÍ∏∞ Ïª§ÎÆ§ÎãàÏºÄÏù¥ÏÖòÏùÑ Í∏∞Î≥∏ÏúºÎ°ú ÌïòÎ©∞, ÏΩîÏñ¥ÌÉÄÏûÑ(14:00-17:00 KST)ÏóêÎäî Î™®Îì† ÌåÄÏõêÏù¥ Ïò®ÎùºÏù∏ ÏÉÅÌÉúÎ•º Ïú†ÏßÄÌï©ÎãàÎã§. NotionÏùÑ ÌÜµÌïú Î¨∏ÏÑúÌôîÏôÄ SlackÏùÑ ÌÜµÌïú ÏÜåÌÜµÏùÑ ÌôúÏö©Ìï©ÎãàÎã§.',
                        askedBy: 'Ï†ïÌîÑÎ°†Ìä∏',
                        answeredBy: 'Ïù¥ÏõêÍ≤© (ÌåÄ Î¶¨Îìú)',
                        date: '2024-01-08',
                        upvotes: 15,
                        category: 'ÌòëÏóÖ Î∞©Ïãù',
                        tags: ['ÏãúÏ∞®', 'Í∏ÄÎ°úÎ≤å', 'ÎπÑÎèôÍ∏∞']
                      }
                    ].map((qa) => (
                      <div key={qa.id} className={`${colors.card} p-6 rounded-xl shadow-sm`}>
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-2">
                              <span className={`${colors.primary.bg} ${colors.primary.text} px-2 py-1 rounded text-xs`}>
                                {qa.category}
                              </span>
                              <span className="text-gray-500 dark:text-gray-400 text-sm">{qa.date}</span>
                            </div>
                            <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">{qa.question}</h4>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">ÏßàÎ¨∏: {qa.askedBy}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span className="text-sm text-gray-500 dark:text-gray-400">üëç {qa.upvotes}</span>
                          </div>
                        </div>
                        
                        <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg border-l-4 border-blue-500">
                          <p className="text-gray-800 dark:text-gray-200 mb-2">{qa.answer}</p>
                          <p className="text-sm text-blue-600 dark:text-blue-400">ÎãµÎ≥Ä: {qa.answeredBy}</p>
                        </div>

                        <div className="flex flex-wrap gap-2 mt-3">
                          {qa.tags.map((tag, idx) => (
                            <span key={idx} className="bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-300 px-2 py-1 rounded text-xs">
                              #{tag}
                            </span>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {/* Î¶¨Î∑∞ ÏÑπÏÖò */}
                {activeSubTab === 'reviews' && (
                  <div className="space-y-4">
                    {[
                      {
                        id: '1',
                        reviewerName: 'ÍπÄÍ∞úÎ∞úÏûê',
                        rating: 5,
                        comment: 'Ï†ïÎßê Ï¢ãÏùÄ ÏõêÍ≤©Í∑ºÎ¨¥ ÌôòÍ≤ΩÏù¥ÏóàÏäµÎãàÎã§. Ïû•ÎπÑ ÏßÄÏõêÏù¥ ÌõåÎ•≠ÌïòÍ≥† ÌåÄ Î¨∏ÌôîÍ∞Ä Îß§Ïö∞ Ìè¨Ïö©Ï†ÅÏûÖÎãàÎã§.',
                        date: '2024-01-20',
                        workPeriod: '6Í∞úÏõî',
                        position: 'ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞úÏûê',
                        pros: ['Ïû•ÎπÑ ÏßÄÏõê Ïö∞Ïàò', 'Ïú†Ïó∞Ìïú Í∑ºÎ¨¥ÏãúÍ∞Ñ', 'Ï¢ãÏùÄ ÌåÄ Î¨∏Ìôî'],
                        cons: ['ÏãúÏ∞®Î°ú Ïù∏Ìïú ÏÜåÌÜµ ÏßÄÏó∞'],
                        workLifeBalance: 5,
                        communicationQuality: 4,
                        toolsAndTech: 5,
                        managementSupport: 5,
                        careerGrowth: 4
                      },
                      {
                        id: '2',
                        reviewerName: 'Î∞ïÎîîÏûêÏù¥ÎÑà',
                        rating: 4,
                        comment: 'ÌÅ¨Î¶¨ÏóêÏù¥Ìã∞Î∏åÌïú ÏóÖÎ¨¥ ÌôòÍ≤ΩÍ≥º Ï¢ãÏùÄ ÎèôÎ£åÎì§. Îã§Îßå Ï¥àÍ∏∞ Ï†ÅÏùë Í∏∞Í∞ÑÏù¥ ÌïÑÏöîÌñàÏäµÎãàÎã§.',
                        date: '2024-01-15',
                        workPeriod: '4Í∞úÏõî',
                        position: 'UX/UI ÎîîÏûêÏù¥ÎÑà',
                        pros: ['ÏûêÏú®Ï†ÅÏù∏ ÏóÖÎ¨¥ÌôòÍ≤Ω', 'Í∏ÄÎ°úÎ≤å ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÌóò', 'ÏÑ±Ïû• Í∏∞Ìöå'],
                        cons: ['Ï¥àÍ∏∞ Ï†ÅÏùë Ïñ¥Î†§ÏõÄ', 'ÏãúÍ∞ÑÎåÄ Ï∞®Ïù¥'],
                        workLifeBalance: 4,
                        communicationQuality: 4,
                        toolsAndTech: 5,
                        managementSupport: 4,
                        careerGrowth: 5
                      }
                    ].map((review) => (
                      <div key={review.id} className="bg-white dark:bg-gray-700 p-6 rounded-xl shadow-lg border border-gray-200 dark:border-gray-600">
                        <div className="flex items-start justify-between mb-4">
                          <div>
                            <div className="flex items-center space-x-2 mb-2">
                              <h4 className="text-lg font-semibold text-gray-900 dark:text-white">{review.reviewerName}</h4>
                              <div className="flex">
                                {[...Array(5)].map((_, i) => (
                                  <span key={i} className={`text-lg ${i < review.rating ? 'text-yellow-400' : 'text-gray-300'}`}>
                                    ‚≠ê
                                  </span>
                                ))}
                              </div>
                            </div>
                            <p className="text-sm text-gray-600 dark:text-gray-400">{review.position} ‚Ä¢ {review.workPeriod} Í∑ºÎ¨¥</p>
                          </div>
                          <span className="text-sm text-gray-500 dark:text-gray-400">{review.date}</span>
                        </div>

                        <p className="text-gray-800 dark:text-gray-200 mb-4">{review.comment}</p>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                          <div>
                            <h5 className="text-sm font-medium text-green-600 dark:text-green-400 mb-2">üëç Ïû•Ï†ê</h5>
                            <ul className="space-y-1">
                              {review.pros.map((pro, idx) => (
                                <li key={idx} className="text-sm text-gray-700 dark:text-gray-300">‚Ä¢ {pro}</li>
                              ))}
                            </ul>
                          </div>
                          <div>
                            <h5 className="text-sm font-medium text-red-600 dark:text-red-400 mb-2">üëé ÏïÑÏâ¨Ïö¥ Ï†ê</h5>
                            <ul className="space-y-1">
                              {review.cons.map((con, idx) => (
                                <li key={idx} className="text-sm text-gray-700 dark:text-gray-300">‚Ä¢ {con}</li>
                              ))}
                            </ul>
                          </div>
                        </div>

                        <div className="border-t border-gray-200 dark:border-gray-600 pt-4">
                          <h5 className="text-sm font-medium text-gray-900 dark:text-white mb-3">ÏÑ∏Î∂Ä ÌèâÍ∞Ä</h5>
                          <div className="grid grid-cols-2 md:grid-cols-5 gap-3 text-sm">
                            {[
                              { label: 'ÏõåÎùºÎ∞∏', score: review.workLifeBalance },
                              { label: 'ÏÜåÌÜµ', score: review.communicationQuality },
                              { label: 'ÎèÑÍµ¨/Í∏∞Ïà†', score: review.toolsAndTech },
                              { label: 'ÏßÄÏõê', score: review.managementSupport },
                              { label: 'ÏÑ±Ïû•', score: review.careerGrowth }
                            ].map((item, idx) => (
                              <div key={idx} className="text-center">
                                <p className="text-gray-600 dark:text-gray-400">{item.label}</p>
                                <p className="font-bold text-blue-600 dark:text-blue-400">{item.score}/5</p>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )}
      </div>

      {/* === Î™®Îã¨ Ïª¥Ìè¨ÎÑåÌä∏Îì§ === */}

      {/* ÏßÄÏõêÌïòÍ∏∞ Î™®Îã¨ */}
      {showApplicationModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between">
                <h3 className="text-2xl font-bold text-gray-900 dark:text-white">üìù ÏõêÍ≤©Í∑ºÎ¨¥ ÏßÄÏõêÏÑú</h3>
                <button
                  onClick={() => setShowApplicationModal(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>
            </div>
            
            <div className="p-6 space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Ïù¥Î¶Ñ</label>
                  <input type="text" className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Ïù¥Î©îÏùº</label>
                  <input type="email" className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">ÏõêÍ≤©Í∑ºÎ¨¥ Í≤ΩÌóò</label>
                <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                  <option>1ÎÖÑ ÎØ∏Îßå</option>
                  <option>1-3ÎÖÑ</option>
                  <option>3-5ÎÖÑ</option>
                  <option>5ÎÖÑ Ïù¥ÏÉÅ</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">ÏÑ†Ìò∏ ÏãúÍ∞ÑÎåÄ</label>
                <select 
                  value={selectedTimezone}
                  onChange={(e) => setSelectedTimezone(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                >
                  <option value="Asia/Seoul">Asia/Seoul (UTC+9)</option>
                  <option value="America/New_York">America/New_York (UTC-5)</option>
                  <option value="Europe/London">Europe/London (UTC+0)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Í∑ºÎ¨¥ Ïä§ÌÉÄÏùº</label>
                <div className="space-y-2">
                  <label className="flex items-center">
                    <input 
                      type="radio" 
                      name="workStyle" 
                      value="flexible"
                      checked={workingHoursPreference === 'flexible'}
                      onChange={(e) => setWorkingHoursPreference(e.target.value)}
                      className="mr-2" 
                    />
                    Ïú†Ïó∞ Í∑ºÎ¨¥ (ÏΩîÏñ¥ÌÉÄÏûÑ Ï§ÄÏàò)
                  </label>
                  <label className="flex items-center">
                    <input 
                      type="radio" 
                      name="workStyle" 
                      value="fixed"
                      checked={workingHoursPreference === 'fixed'}
                      onChange={(e) => setWorkingHoursPreference(e.target.value)}
                      className="mr-2" 
                    />
                    Í≥†Ï†ï Í∑ºÎ¨¥ ÏãúÍ∞Ñ
                  </label>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">ÏûêÍ∏∞ÏÜåÍ∞ú</label>
                <textarea rows={4} className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" placeholder="ÏõêÍ≤©Í∑ºÎ¨¥ Í≤ΩÌóòÍ≥º Ïù¥ ÌîÑÎ°úÏ†ùÌä∏Ïóê ÏßÄÏõêÌïòÎäî Ïù¥Ïú†Î•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî..."></textarea>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowApplicationModal(false)}
                  className="px-6 py-3 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                >
                  Ï∑®ÏÜå
                </button>
                <button className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200">
                  ÏßÄÏõêÏÑú Ï†úÏ∂ú
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Í∞ÄÏÉÅ Ïò§ÌîºÏä§ Ìà¨Ïñ¥ Î™®Îã¨ */}
      {showVirtualOfficeModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between">
                <h3 className="text-2xl font-bold text-gray-900 dark:text-white">üè¢ Í∞ÄÏÉÅ Ïò§ÌîºÏä§ Ìà¨Ïñ¥</h3>
                <button
                  onClick={() => setShowVirtualOfficeModal(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>
            </div>
            
            <div className="p-6">
              <div className="bg-gradient-to-br from-cyan-50 to-blue-100 dark:from-cyan-900/20 dark:to-blue-900/20 p-8 rounded-xl border border-cyan-200 dark:border-cyan-700 mb-6">
                <div className="text-center">
                  <div className="text-6xl mb-4">üè¢</div>
                  <h4 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">{remoteWork.virtualOffice.platform}</h4>
                  <p className="text-gray-600 dark:text-gray-400">3D Í∞ÄÏÉÅ Ïò§ÌîºÏä§ ÌôòÍ≤Ω</p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {remoteWork.virtualOffice.virtualRooms.map((room) => (
                  <div key={room.id} className="bg-gray-50 dark:bg-gray-700 p-6 rounded-xl border border-gray-200 dark:border-gray-600">
                    <h5 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">{room.name}</h5>
                    <p className="text-gray-600 dark:text-gray-400 mb-4">{room.purpose}</p>
                    <div className="space-y-2 text-sm">
                      <p><strong>ÏàòÏö© Ïù∏Ïõê:</strong> {room.capacity}Î™Ö</p>
                      <p><strong>Ïù¥Ïö© ÏãúÍ∞Ñ:</strong> {room.availability}</p>
                      <div>
                        <strong>ÎèÑÍµ¨:</strong>
                        <div className="flex flex-wrap gap-1 mt-1">
                          {room.tools.map((tool, idx) => (
                            <span key={idx} className="bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 px-2 py-1 rounded text-xs">
                              {tool}
                            </span>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              <div className="mt-6">
                <h5 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">ÏÜåÏÖú Í≥µÍ∞Ñ</h5>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                  {remoteWork.virtualOffice.socialSpaces.map((space, idx) => (
                    <div key={idx} className="bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg text-center border border-purple-200 dark:border-purple-700">
                      <div className="text-2xl mb-1">üéÆ</div>
                      <p className="text-sm text-gray-700 dark:text-gray-300">{space}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* ÌôòÍ≤Ω ÏÑ§Ï†ï ÎèÑÏö∞ÎØ∏ Î™®Îã¨ */}
      {showEnvironmentSetupModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between">
                <h3 className="text-2xl font-bold text-gray-900 dark:text-white">‚öôÔ∏è ÌôàÏò§ÌîºÏä§ ÌôòÍ≤Ω ÏÑ§Ï†ï Í∞ÄÏù¥Îìú</h3>
                <button
                  onClick={() => setShowEnvironmentSetupModal(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>
            </div>
            
            <div className="p-6">
              <div className="mb-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold text-gray-900 dark:text-white">ÏÑ§Ï†ï ÏßÑÌñâÎèÑ</h4>
                  <span className="text-sm text-gray-600 dark:text-gray-400">{environmentSetupStep + 1}/5</span>
                </div>
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-green-500 to-emerald-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: `${((environmentSetupStep + 1) / 5) * 100}%` }}
                  ></div>
                </div>
              </div>

              <div className="space-y-6">
                {environmentSetupStep === 0 && (
                  <div>
                    <h5 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">1. ÏûëÏóÖ Í≥µÍ∞Ñ ÏÑ§Ï†ï</h5>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {remoteWork.remoteWorkEnvironment.workingSpaceRecommendations.map((rec, idx) => (
                        <div key={idx} className="flex items-center space-x-3 bg-green-50 dark:bg-green-900/20 p-4 rounded-xl border border-green-200 dark:border-green-700">
                          <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-sm">
                            ‚úì
                          </div>
                          <span className="text-gray-800 dark:text-gray-200">{rec}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {environmentSetupStep === 1 && (
                  <div>
                    <h5 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">2. Ïû•ÎπÑ Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏</h5>
                    <div className="space-y-3">
                      {remoteWork.remoteWorkEnvironment.equipmentProvided.map((equipment, idx) => (
                        <label key={idx} className="flex items-center space-x-3 bg-blue-50 dark:bg-blue-900/20 p-4 rounded-xl border border-blue-200 dark:border-blue-700 cursor-pointer">
                          <input type="checkbox" className="w-5 h-5 text-blue-600 rounded" />
                          <span className="text-gray-800 dark:text-gray-200">{equipment}</span>
                        </label>
                      ))}
                    </div>
                  </div>
                )}

                {environmentSetupStep === 2 && (
                  <div>
                    <h5 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">3. Î≥¥Ïïà ÏÑ§Ï†ï</h5>
                    <div className="space-y-3">
                      {remoteWork.remoteWorkEnvironment.securityRequirements.map((req, idx) => (
                        <div key={idx} className="flex items-center space-x-3 bg-red-50 dark:bg-red-900/20 p-4 rounded-xl border border-red-200 dark:border-red-700">
                          <div className="w-6 h-6 bg-red-500 rounded-full flex items-center justify-center text-white text-sm">
                            üîí
                          </div>
                          <span className="text-gray-800 dark:text-gray-200">{req}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <div className="flex justify-between mt-8">
                <button
                  onClick={() => setEnvironmentSetupStep(Math.max(0, environmentSetupStep - 1))}
                  disabled={environmentSetupStep === 0}
                  className="px-6 py-3 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors disabled:opacity-50"
                >
                  Ïù¥Ï†Ñ
                </button>
                <button
                  onClick={() => setEnvironmentSetupStep(Math.min(4, environmentSetupStep + 1))}
                  className="px-6 py-3 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-200"
                >
                  {environmentSetupStep === 4 ? 'ÏôÑÎ£å' : 'Îã§Ïùå'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Ïã§ÏãúÍ∞Ñ Ï±ÑÌåÖ Î™®Îã¨ */}
      {showChatModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-md w-full h-[600px] flex flex-col">
            <div className="p-4 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center text-white">
                    üë§
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 dark:text-white">{remoteWork.contactPerson.name}</h3>
                    <p className="text-sm text-green-600 dark:text-green-400">üü¢ Ïò®ÎùºÏù∏</p>
                  </div>
                </div>
                <button
                  onClick={() => setShowChatModal(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>
            </div>
            
            <div className="flex-1 p-4 overflow-y-auto space-y-4">
              <div className="flex justify-start">
                <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-lg max-w-xs">
                  <p className="text-sm text-gray-800 dark:text-gray-200">ÏïàÎÖïÌïòÏÑ∏Ïöî! ÏõêÍ≤©Í∑ºÎ¨¥ Ìè¨ÏßÄÏÖòÏóê Í¥ÄÏã¨ Í∞ÄÏ†∏Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§. Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÏãúÎ©¥ Ïñ∏Ï†úÎì† ÎßêÏîÄÌï¥ Ï£ºÏÑ∏Ïöî.</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">Î∞©Í∏à Ï†Ñ</p>
                </div>
              </div>
              
              <div className="flex justify-end">
                <div className="bg-blue-500 p-3 rounded-lg max-w-xs">
                  <p className="text-sm text-white">ÏïàÎÖïÌïòÏÑ∏Ïöî! ÏõêÍ≤©Í∑ºÎ¨¥ ÌôòÍ≤ΩÏóê ÎåÄÌï¥ Îçî ÏûêÏÑ∏Ìûà ÏïåÍ≥† Ïã∂ÏäµÎãàÎã§.</p>
                  <p className="text-xs text-blue-100 mt-1">Î∞©Í∏à Ï†Ñ</p>
                </div>
              </div>
            </div>
            
            <div className="p-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex space-x-2">
                <input 
                  type="text" 
                  placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                  className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
                />
                <button className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
                  Ï†ÑÏÜ°
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* ÌôîÏÉÅ ÎØ∏ÌåÖ ÏòàÏïΩ Î™®Îã¨ */}
      {showVideoCallModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-lg w-full">
            <div className="p-6 border-b border-gray-200 dark:border-gray-700">
              <div className="flex items-center justify-between">
                <h3 className="text-2xl font-bold text-gray-900 dark:text-white">üìπ ÌôîÏÉÅ ÎØ∏ÌåÖ ÏòàÏïΩ</h3>
                <button
                  onClick={() => setShowVideoCallModal(false)}
                  className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                >
                  ‚úï
                </button>
              </div>
            </div>
            
            <div className="p-6 space-y-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-full flex items-center justify-center text-white text-2xl mx-auto mb-4">
                  üìπ
                </div>
                <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">1:1 ÏÉÅÎã¥ ÏòàÏïΩ</h4>
                <p className="text-gray-600 dark:text-gray-400">ÏõêÍ≤©Í∑ºÎ¨¥Ïóê ÎåÄÌïú ÏÉÅÏÑ∏Ìïú ÏÉÅÎã¥ÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî</p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">ÎÇ†Ïßú</label>
                  <input type="date" className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">ÏãúÍ∞Ñ</label>
                  <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                    <option>10:00</option>
                    <option>14:00</option>
                    <option>16:00</option>
                    <option>18:00</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">ÏÉÅÎã¥ Ï£ºÏ†ú</label>
                <select className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white">
                  <option>Ï†ÑÎ∞òÏ†ÅÏù∏ ÏõêÍ≤©Í∑ºÎ¨¥ ÌôòÍ≤Ω</option>
                  <option>Í∏∞Ïà† Ïä§ÌÉù Î∞è ÎèÑÍµ¨</option>
                  <option>ÌåÄ Î¨∏Ìôî Î∞è ÏÜåÌÜµ Î∞©Ïãù</option>
                  <option>Î≥µÎ¶¨ÌõÑÏÉù Î∞è ÏßÄÏõêÏÇ¨Ìï≠</option>
                </select>
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowVideoCallModal(false)}
                  className="px-6 py-3 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
                >
                  Ï∑®ÏÜå
                </button>
                <button className="px-6 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-xl hover:from-purple-700 hover:to-indigo-700 transition-all duration-200">
                  ÏòàÏïΩÌïòÍ∏∞
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Îã§Î•∏ Î™®Îã¨Îì§ÎèÑ Ïú†ÏÇ¨ÌïòÍ≤å Íµ¨ÌòÑ */}
      {/* ... ÏÉùÏÇ∞ÏÑ± Î∂ÑÏÑù, Ïò®Î≥¥Îî©, Ï†ïÏ±Ö Î™®Îã¨ Îì± */}
    </div>
  );
} 