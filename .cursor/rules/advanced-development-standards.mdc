---
description: 
globs: 
alwaysApply: true
---
# üöÄ **ADVANCED DEVELOPMENT STANDARDS**

**STRATEGIC MANDATE**: These standards establish advanced practices for security, performance, accessibility, and modern development workflows. They complement the Error Prevention Protocol and ensure production-ready code quality.

---

## üîê **SECURITY PROTOCOLS**

### **SECURITY S1: DATA PROTECTION MANDATE**
**CRITICAL REQUIREMENT**: All user data must be protected according to modern security standards.

**MANDATORY IMPLEMENTATIONS**:

1. **üõ°Ô∏è INPUT VALIDATION & SANITIZATION**:
   ```typescript
   // ALWAYS validate and sanitize user inputs
   import { z } from 'zod';
   
   const UserInputSchema = z.object({
     email: z.string().email(),
     name: z.string().min(1).max(100),
     content: z.string().max(5000)
   });
   
   // NEVER trust raw user input
   const validatedInput = UserInputSchema.parse(rawInput);
   ```

2. **üîë AUTHENTICATION & AUTHORIZATION**:
   - Use secure JWT implementation with proper expiration
   - Implement refresh token rotation
   - **NEVER** store sensitive data in localStorage
   - Use httpOnly cookies for authentication tokens
   - Implement proper RBAC (Role-Based Access Control)

3. **üåê API SECURITY**:
   - Implement rate limiting on all endpoints
   - Use CORS properly with specific origins
   - Validate all API inputs with Zod schemas
   - **NEVER** expose internal error details to clients
   - Log security events for monitoring

4. **üîí ENVIRONMENT SECURITY**:
   ```typescript
   // CORRECT - Server-side environment variables
   const JWT_SECRET = process.env.JWT_SECRET!;
   
   // INCORRECT - Never expose secrets to client
   const API_KEY = process.env.NEXT_PUBLIC_API_KEY; // Only for public data
   ```

### **SECURITY S2: XSS & INJECTION PREVENTION**
**MANDATORY PROTECTIONS**:

1. **üö´ XSS PREVENTION**:
   - Use React's built-in XSS protection (avoid dangerouslySetInnerHTML)
   - Sanitize any HTML content with DOMPurify
   - Validate all dynamic content rendering
   - **NEVER** concatenate user input into HTML strings

2. **üíâ SQL/NoSQL INJECTION PREVENTION**:
   - Use parameterized queries ALWAYS
   - Validate database inputs with schemas
   - Implement query result sanitization
   - **NEVER** build queries with string concatenation

---

## ‚ö° **PERFORMANCE OPTIMIZATION PROTOCOLS**

### **PERFORMANCE P1: CORE WEB VITALS MANDATE**
**TARGET METRICS**:
- **LCP (Largest Contentful Paint)**: < 2.5s
- **FID (First Input Delay)**: < 100ms
- **CLS (Cumulative Layout Shift)**: < 0.1

**MANDATORY OPTIMIZATIONS**:

1. **üñºÔ∏è IMAGE OPTIMIZATION**:
   ```typescript
   // ALWAYS use Next.js Image component
   import Image from 'next/image';
   
   <Image
     src="/image.jpg"
     alt="Descriptive alt text"
     width={800}
     height={600}
     priority={isAboveFold}
     placeholder="blur"
     blurDataURL="data:image/jpeg;base64,..."
   />
   ```

2. **üì¶ BUNDLE OPTIMIZATION**:
   - Use dynamic imports for code splitting
   - Implement proper tree shaking
   - Analyze bundle size regularly with @next/bundle-analyzer
   - **NEVER** import entire libraries when only using specific functions

3. **üèÉ‚Äç‚ôÇÔ∏è LOADING OPTIMIZATION**:
   ```typescript
   // CORRECT - Dynamic imports for heavy components
   const HeavyComponent = dynamic(() => import('@/components/HeavyComponent'), {
     loading: () => <LoadingSpinner />,
     ssr: false // if component uses browser APIs
   });
   ```

4. **üóÑÔ∏è CACHING STRATEGY**:
   - Implement proper HTTP caching headers
   - Use Next.js ISR for dynamic content
   - Cache API responses appropriately
   - **NEVER** over-cache dynamic user data

### **PERFORMANCE P2: DATABASE & API OPTIMIZATION**
**MANDATORY PRACTICES**:

1. **üîÑ DATA FETCHING OPTIMIZATION**:
   ```typescript
   // CORRECT - Server Component data fetching
   async function BlogPage({ params }: { params: { id: string } }) {
     const post = await getBlogPost(params.id);
     return <BlogPostComponent post={post} />;
   }
   
   // AVOID - Client-side fetching for initial data
   ```

2. **üìä DATABASE QUERY OPTIMIZATION**:
   - Use database indexes appropriately
   - Implement pagination for large datasets
   - Use database query optimization tools
   - **NEVER** fetch more data than needed (N+1 problem)

---

## ‚ôø **ACCESSIBILITY COMPLIANCE PROTOCOLS**

### **ACCESSIBILITY A1: WCAG 2.1 AA COMPLIANCE**
**MANDATORY REQUIREMENTS**:

1. **üéØ SEMANTIC HTML STRUCTURE**:
   ```typescript
   // CORRECT - Semantic HTML with proper ARIA
   <main>
     <h1>Page Title</h1>
     <nav aria-label="Main navigation">
       <ul>
         <li><a href="/home">Home</a></li>
       </ul>
     </nav>
     <section aria-labelledby="content-heading">
       <h2 id="content-heading">Content Section</h2>
     </section>
   </main>
   ```

2. **‚å®Ô∏è KEYBOARD NAVIGATION**:
   - All interactive elements must be keyboard accessible
   - Implement proper focus management
   - Use proper tab order (tabindex)
   - **NEVER** create keyboard traps

3. **üé® COLOR & CONTRAST**:
   - Maintain WCAG AA contrast ratios (4.5:1 for normal text)
   - **NEVER** rely solely on color to convey information
   - Test with color blindness simulators

4. **üì± RESPONSIVE ACCESSIBILITY**:
   - Ensure touch targets are at least 44px
   - Implement proper viewport scaling
   - Test with screen readers on mobile devices

### **ACCESSIBILITY A2: SCREEN READER OPTIMIZATION**
**MANDATORY IMPLEMENTATIONS**:

1. **üîä ARIA LABELS & DESCRIPTIONS**:
   ```typescript
   // CORRECT - Comprehensive ARIA implementation
   <button 
     aria-label="Close dialog"
     aria-describedby="close-help"
     onClick={handleClose}
   >
     <CloseIcon />
   </button>
   <div id="close-help" className="sr-only">
     Closes the current dialog and returns to the main content
   </div>
   ```

2. **üì¢ LIVE REGIONS FOR DYNAMIC CONTENT**:
   ```typescript
   // CORRECT - Announce dynamic changes
   <div aria-live="polite" aria-atomic="true">
     {statusMessage}
   </div>
   ```

---

## üß™ **TESTING & QUALITY ASSURANCE PROTOCOLS**

### **TESTING T1: COMPREHENSIVE TESTING STRATEGY**
**MANDATORY TEST COVERAGE**:

1. **üîß UNIT TESTING**:
   ```typescript
   // CORRECT - Test component behavior
   describe('BlogCard', () => {
     it('should render blog post data correctly', () => {
       const mockPost = { id: '1', title: 'Test', content: 'Content' };
       render(<BlogCard post={mockPost} />);
       expect(screen.getByText('Test')).toBeInTheDocument();
     });
   });
   ```

2. **üîó INTEGRATION TESTING**:
   - Test API routes with proper mocking
   - Test component interactions
   - Verify data flow between components
   - **NEVER** deploy without integration tests

3. **üåê E2E TESTING**:
   - Test critical user journeys
   - Verify authentication flows
   - Test responsive behavior
   - **NEVER** skip E2E tests for core functionality

### **TESTING T2: AUTOMATED QUALITY CHECKS**
**MANDATORY AUTOMATION**:

1. **ü§ñ CI/CD PIPELINE REQUIREMENTS**:
   - Automated testing on every PR
   - Build verification before merge
   - Security scanning with tools like Snyk
   - Performance regression testing

2. **üìä CODE QUALITY METRICS**:
   - Test coverage > 80% for critical paths
   - Lighthouse scores > 90 for all metrics
   - Bundle size monitoring and alerts
   - **NEVER** merge code that degrades quality metrics

---

## üîÑ **DEVELOPMENT WORKFLOW PROTOCOLS**

### **WORKFLOW W1: GIT & VERSION CONTROL**
**MANDATORY PRACTICES**:

1. **üìù COMMIT MESSAGE STANDARDS**:
   ```
   feat: add user authentication with JWT
   fix: resolve memory leak in image carousel
   docs: update API documentation for auth endpoints
   refactor: extract reusable form validation logic
   test: add unit tests for user service
   ```

2. **üåø BRANCHING STRATEGY**:
   - Use feature branches for all changes
   - Implement proper PR review process
   - **NEVER** commit directly to main branch
   - Use conventional commit messages

3. **üîç CODE REVIEW REQUIREMENTS**:
   - All code must be reviewed by at least one team member
   - Security-sensitive changes require security review
   - Performance-critical changes require performance review
   - **NEVER** merge without approval

### **WORKFLOW W2: DOCUMENTATION & COMMUNICATION**
**MANDATORY DOCUMENTATION**:

1. **üìö CODE DOCUMENTATION**:
   ```typescript
   /**
    * Authenticates user and returns JWT token
    * @param credentials - User email and password
    * @returns Promise resolving to authentication result
    * @throws AuthenticationError when credentials are invalid
    */
   async function authenticateUser(credentials: UserCredentials): Promise<AuthResult> {
     // Implementation
   }
   ```

2. **üìã API DOCUMENTATION**:
   - Document all API endpoints with OpenAPI/Swagger
   - Include request/response examples
   - Document error responses and status codes
   - **NEVER** deploy undocumented APIs

---

## üéØ **PRODUCTION READINESS CHECKLIST**

### **PRODUCTION P1: DEPLOYMENT VERIFICATION**
**MANDATORY PRE-DEPLOYMENT CHECKS**:

- [ ] All environment variables configured
- [ ] Database migrations tested
- [ ] SSL certificates properly configured
- [ ] CDN and caching configured
- [ ] Error monitoring (Sentry) configured
- [ ] Performance monitoring configured
- [ ] Backup and disaster recovery tested
- [ ] Security headers properly configured
- [ ] GDPR/privacy compliance verified
- [ ] Load testing completed

### **PRODUCTION P2: MONITORING & OBSERVABILITY**
**MANDATORY MONITORING**:

1. **üìä APPLICATION MONITORING**:
   - Error tracking with detailed stack traces
   - Performance monitoring with real user metrics
   - User behavior analytics (privacy-compliant)
   - **NEVER** deploy without proper monitoring

2. **üö® ALERTING STRATEGY**:
   - Critical error alerts (immediate)
   - Performance degradation alerts
   - Security incident alerts
   - **NEVER** ignore monitoring alerts

---

## üèÜ **EXCELLENCE STANDARDS**

### **EXCELLENCE E1: CODE CRAFTSMANSHIP**
**PURSUIT OF EXCELLENCE**:

1. **üé® CODE AESTHETICS**:
   - Consistent formatting with Prettier
   - Meaningful variable and function names
   - Proper code organization and structure
   - **ALWAYS** prioritize code readability

2. **üß† ARCHITECTURAL THINKING**:
   - Consider scalability in all design decisions
   - Implement proper separation of concerns
   - Use appropriate design patterns
   - **ALWAYS** think about future maintenance

### **EXCELLENCE E2: CONTINUOUS IMPROVEMENT**
**LEARNING & ADAPTATION**:

1. **üìà SKILL DEVELOPMENT**:
   - Stay updated with latest React/Next.js features
   - Learn from code reviews and feedback
   - Contribute to open source projects
   - **ALWAYS** seek to improve technical skills

2. **üîÑ PROCESS IMPROVEMENT**:
   - Regularly review and update development processes
   - Gather feedback from team members
   - Implement lessons learned from incidents
   - **ALWAYS** strive for process optimization

---

**üéØ STRATEGIC MANDATE**: These standards represent the pinnacle of modern web development practices. They ensure not just functional code, but secure, performant, accessible, and maintainable applications that provide exceptional user experiences while maintaining developer productivity and code quality. 