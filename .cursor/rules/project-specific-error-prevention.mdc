---
description: 
globs: 
alwaysApply: true
---
# üéØ **PROJECT-SPECIFIC ERROR PREVENTION GUIDE**

**CONTEXT**: This guide addresses specific error patterns observed during the development of the aiproject02 Next.js application. Each rule directly corresponds to actual failures encountered and their prevention strategies.

---

## üîç **ERROR PATTERN ANALYSIS**

### **PATTERN 1: Library Integration Cascade Failures**
**OBSERVED IN**: next-intl integration
**ROOT CAUSE**: Partial implementation without understanding complete requirements
**IMPACT**: Multiple hours of debugging, system-wide failures

### **PATTERN 2: TypeScript Type Assumption Errors**
**OBSERVED IN**: BlogPost interfaces, JWT utilities, component props
**ROOT CAUSE**: Assuming type safety without explicit verification
**IMPACT**: Build failures, runtime errors

### **PATTERN 3: Configuration File Inconsistencies**
**OBSERVED IN**: Missing root layout, incorrect import paths
**ROOT CAUSE**: Incomplete understanding of Next.js App Router requirements
**IMPACT**: Build process failures

---

## üö® **CRITICAL PREVENTION PROTOCOLS**

### **PROTOCOL CP1: NEXT-INTL INTEGRATION CHECKLIST**
**TRIGGER**: Any internationalization library integration

**MANDATORY VERIFICATION SEQUENCE**:
```bash
# 1. CONFIGURATION VERIFICATION
‚úÖ next.config.js includes withNextIntl plugin
‚úÖ middleware.ts has correct matcher: ['/((?!api|_next|_vercel|.*\\..*).*)']
‚úÖ i18n.ts configuration file exists with proper locale handling

# 2. PROVIDER SETUP VERIFICATION  
‚úÖ NextIntlClientProvider wraps children in root layout
‚úÖ getMessages() used in server components (not useMessages)
‚úÖ useTranslations() only used in client components

# 3. DIRECTORY STRUCTURE VERIFICATION
‚úÖ All routes moved to [locale] directory
‚úÖ No legacy files (App.tsx, ClientAppContainer.tsx) remain
‚úÖ Root redirect page exists at src/app/page.tsx

# 4. RUNTIME VERIFICATION
‚úÖ Development server starts without errors
‚úÖ All routes accessible with locale prefixes
‚úÖ Language switching works without console errors
‚úÖ Translation keys resolve correctly
```

### **PROTOCOL CP2: TYPESCRIPT SAFETY CHECKLIST**
**TRIGGER**: Any interface or type definition changes

**MANDATORY TYPE SAFETY SEQUENCE**:
```typescript
// 1. INTERFACE DEFINITION VERIFICATION
‚úÖ All required properties explicitly marked
‚úÖ Optional properties use ? syntax
‚úÖ Array types specified (string[] not string)

interface BlogPost {
  id: string;           // ‚úÖ Required, explicit type
  title: string;        // ‚úÖ Required, explicit type
  tags: string[];       // ‚úÖ Required array, not optional
  likes?: number;       // ‚úÖ Optional with ? syntax
}

// 2. TYPE GUARD IMPLEMENTATION
‚úÖ Type guards for external data
‚úÖ Runtime validation with Zod schemas
‚úÖ Proper error handling for type mismatches

function isBlogPost(data: unknown): data is BlogPost {
  return typeof data === 'object' && 
         data !== null && 
         'id' in data && 
         typeof (data as any).id === 'string';
}

// 3. BUILD-TIME VERIFICATION
‚úÖ npm run build passes without TypeScript errors
‚úÖ No 'any' types in production code
‚úÖ All function parameters and returns typed
```

### **PROTOCOL CP3: NEXT.JS APP ROUTER STRUCTURE CHECKLIST**
**TRIGGER**: Any routing or layout changes

**MANDATORY STRUCTURE VERIFICATION**:
```
src/app/
‚îú‚îÄ‚îÄ layout.tsx              ‚úÖ Root layout with HTML structure
‚îú‚îÄ‚îÄ page.tsx               ‚úÖ Root redirect or main page
‚îú‚îÄ‚îÄ [locale]/              ‚úÖ Locale-based routing
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx         ‚úÖ Locale-specific layout
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx          ‚úÖ Locale home page
‚îÇ   ‚îú‚îÄ‚îÄ blog/             ‚úÖ All routes under locale
‚îÇ   ‚îî‚îÄ‚îÄ ...other routes   ‚úÖ Complete migration
‚îî‚îÄ‚îÄ api/                  ‚úÖ API routes outside locale
```

**VERIFICATION COMMANDS**:
```bash
‚úÖ All page.tsx files have proper async function exports
‚úÖ All layout.tsx files have proper children prop handling
‚úÖ No .tsx extensions in import statements
‚úÖ All imports use @/ path aliases
```

---

## üîß **SPECIFIC FIX PATTERNS**

### **FIX PATTERN F1: JWT Utility Type Safety**
**PROBLEM**: JWT decode functions assuming token validity
**SOLUTION**: Implement proper type guards and error handling

```typescript
// ‚ùå INCORRECT - Assumes token is valid
function getTokenPayload(token: string): JWTPayload {
  return jwt.decode(token) as JWTPayload;
}

// ‚úÖ CORRECT - Handles invalid tokens
function getTokenPayload(token: string): JWTPayload | null {
  try {
    const decoded = jwt.decode(token);
    if (decoded && typeof decoded === 'object') {
      return decoded as JWTPayload;
    }
    return null;
  } catch {
    return null;
  }
}
```

### **FIX PATTERN F2: Component Interface Consistency**
**PROBLEM**: Props interfaces don't match component usage
**SOLUTION**: Verify interface matches actual component needs

```typescript
// ‚ùå INCORRECT - Interface doesn't match usage
interface FileUploadProps {
  onUpload: (file: File) => void;
}

// ‚úÖ CORRECT - Interface matches component implementation
interface FileUploadProps {
  onFileSelect: (file: File) => void;  // Matches actual prop name
  accept?: string;                     // Includes all used props
  maxSize?: number;
}
```

### **FIX PATTERN F3: Build Configuration Consistency**
**PROBLEM**: Configuration files don't match project structure
**SOLUTION**: Verify all config files are synchronized

```javascript
// ‚ùå INCORRECT - Missing plugin configuration
const nextConfig = {
  experimental: {
    appDir: true,
  },
};

// ‚úÖ CORRECT - Complete configuration
const withNextIntl = require('next-intl/plugin')('./src/i18n.ts');
const nextConfig = {
  experimental: {
    appDir: true,
  },
};
module.exports = withNextIntl(nextConfig);
```

---

## üìã **PRE-COMMIT VALIDATION CHECKLIST**

### **VALIDATION V1: MANDATORY PRE-COMMIT CHECKS**
**EXECUTE BEFORE**: Every git commit

```bash
# 1. BUILD VERIFICATION
npm run build                    # ‚úÖ Must pass without errors
npm run lint                     # ‚úÖ Must pass without warnings

# 2. TYPE SAFETY VERIFICATION
npx tsc --noEmit                 # ‚úÖ TypeScript compilation check
grep -r "any" src/ --include="*.ts" --include="*.tsx" # ‚ùå Should find minimal 'any' usage

# 3. IMPORT PATH VERIFICATION
grep -r "\.\./\.\." src/         # ‚ùå Should find no relative path traversals
grep -r "\.tsx" src/             # ‚ùå Should find no .tsx in imports

# 4. CONFIGURATION CONSISTENCY
# ‚úÖ Verify tsconfig.json paths match file structure
# ‚úÖ Verify next.config.js includes all required plugins
# ‚úÖ Verify middleware.ts matcher covers all routes
```

### **VALIDATION V2: INTEGRATION-SPECIFIC CHECKS**
**EXECUTE AFTER**: Library installation or major changes

```bash
# 1. NEXT-INTL SPECIFIC CHECKS
‚úÖ Verify messages/ directory has all locale files
‚úÖ Test locale switching without console errors
‚úÖ Verify all translation keys resolve correctly
‚úÖ Check middleware handles locale routing properly

# 2. AUTHENTICATION SPECIFIC CHECKS
‚úÖ Verify JWT utilities handle invalid tokens
‚úÖ Test authentication flow end-to-end
‚úÖ Verify session management works correctly
‚úÖ Check logout clears all authentication state

# 3. ROUTING SPECIFIC CHECKS
‚úÖ Test all routes load without 404 errors
‚úÖ Verify dynamic routes handle parameters correctly
‚úÖ Check nested layouts render properly
‚úÖ Test route navigation preserves locale
```

---

## üéØ **ERROR RECOVERY PROCEDURES**

### **RECOVERY R1: BUILD FAILURE RECOVERY**
**WHEN**: npm run build fails with TypeScript errors

**SYSTEMATIC RESOLUTION**:
1. **üîç ERROR CATEGORIZATION**:
   ```bash
   # Identify error type
   npm run build 2>&1 | grep "TS[0-9]"  # TypeScript errors
   npm run build 2>&1 | grep "Module"   # Module resolution errors
   npm run build 2>&1 | grep "Cannot"   # Import/export errors
   ```

2. **üìã TYPE ERROR RESOLUTION**:
   ```typescript
   // Common patterns and fixes
   
   // ‚ùå Property 'x' does not exist on type 'y'
   // ‚úÖ Add property to interface or use optional chaining
   
   // ‚ùå Type 'undefined' is not assignable to type 'string'
   // ‚úÖ Add null check or use default value
   
   // ‚ùå Cannot find module './Component'
   // ‚úÖ Check file exists and use correct path alias
   ```

3. **‚úÖ VERIFICATION AFTER FIX**:
   ```bash
   npm run build                 # Must pass
   npm run dev                   # Test development server
   # Test affected functionality manually
   ```

### **RECOVERY R2: INTEGRATION FAILURE RECOVERY**
**WHEN**: Library integration causes system-wide failures

**EMERGENCY PROTOCOL**:
1. **üö® IMMEDIATE ASSESSMENT**:
   ```bash
   git status                    # See all modified files
   git diff                      # Review all changes
   npm ls                        # Check installed packages
   ```

2. **üîÑ INCREMENTAL ROLLBACK**:
   ```bash
   # Rollback configuration files first
   git checkout HEAD -- next.config.js
   git checkout HEAD -- middleware.ts
   git checkout HEAD -- src/i18n.ts
   
   # Test after each rollback
   npm run dev
   ```

3. **üèóÔ∏è SYSTEMATIC RE-INTEGRATION**:
   - Follow Library Integration Protocol completely
   - Implement ONE configuration change at a time
   - Test after each change
   - **NEVER** bulk-apply multiple changes

---

## üìä **SUCCESS METRICS**

### **METRIC M1: INTEGRATION SUCCESS RATE**
- **TARGET**: 100% successful integrations on first attempt
- **MEASUREMENT**: Track library integrations that require zero rollbacks
- **IMPROVEMENT**: If < 100%, review and strengthen integration protocols

### **METRIC M2: BUILD STABILITY**
- **TARGET**: < 5% build failures per week
- **MEASUREMENT**: Track npm run build success rate
- **IMPROVEMENT**: If > 5%, implement stricter pre-commit validation

### **METRIC M3: Type Safety Coverage**
- **TARGET**: Zero 'any' types in production code
- **MEASUREMENT**: Automated scanning for 'any' usage
- **IMPROVEMENT**: Implement type-first development practices

---

**üéØ FINAL MANDATE**: This guide represents hard-learned lessons from actual project failures. Every protocol must be followed religiously to prevent recurrence of the systematic errors that caused significant development delays and debugging sessions. The cost of prevention is always less than the cost of recovery. 